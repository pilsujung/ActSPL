/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 00:52:00 KST 2017
 */

package com.sleepycat.je.latch;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class LatchTable_ESTest6 extends LatchTable_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      linkedList0.add((Object) linkedList0);
      String string0 = latchTable0.toString("", (Object) "", (List) linkedList0, 0);
      assertEquals("<LATCH [name: ] [owner: ] [waiters: [(this Collection), (this Collection)] [(this Collection), (this Collection)] ]>", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("G!_11\"W");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = latchTable0.toString("\n", (Object) "", (List) linkedList0, 3595);
      assertEquals("<LATCH [name: \n] [owner: ]>", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        latchTable0.toString("", object0, (List) linkedList0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      // Undeclared exception!
      try { 
        latchTable0.getNameString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.StringBuffer", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("vI.1$lOz20{<L#N");
      String string0 = latchTable0.toString("vI.1$lOz20{<L#N", (Object) null, (List) null, (-2394));
      assertEquals("<LATCH [name: vI.1$lOz20{<L#N] [owner: null]>", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = latchTable0.toString("", (Object) "", (List) linkedList0, 0);
      assertEquals("<LATCH [name: ] [owner: ]>", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("+6O S=pL$6K^");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = latchTable0.toString((String) null, (Object) null, (List) linkedList0, 0);
      assertEquals("<LATCH [owner: null]>", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      String string0 = latchTable0.getNameString("K1L<=d@u%;O;@_is");
      assertEquals("(K1L<=d@u%;O;@_is)", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("G!_11\"W");
      String string0 = latchTable0.getNameString((String) null);
      assertEquals("G!_11\"W", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("G!_11\"W");
      boolean boolean0 = latchTable0.noteLatch("");
      assertTrue(boolean0);
      
      String string0 = latchTable0.latchesHeldToString();
      assertEquals("\n", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      String string0 = latchTable0.latchesHeldToString();
      assertEquals("", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("G!_11\"W");
      latchTable0.noteLatch("");
      int int0 = latchTable0.countLatchesHeld();
      assertEquals(1, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      int int0 = latchTable0.countLatchesHeld();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      boolean boolean0 = latchTable0.unNoteLatch((Object) null, "");
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      boolean boolean0 = latchTable0.noteLatch((Object) null);
      boolean boolean1 = latchTable0.unNoteLatch((Object) null, "9Nx");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("^GfY`4jkTM");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      latchTable0.noteLatch("^GfY`4jkTM");
      boolean boolean0 = latchTable0.noteLatch(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      latchTable0.clearNotes();
  }
}

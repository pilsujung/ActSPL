/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:15:38 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.log.LogManager;
import com.sleepycat.je.txn.LockGrantType;
import com.sleepycat.je.txn.LockResult;
import com.sleepycat.je.txn.Txn;
import com.sleepycat.je.txn.WriteLockInfo;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class DIN_ESTest7 extends DIN_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      dIN0.selectKey(byteArray0, byteArray0);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test01()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getMainTreeKey();
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test02()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getDupTreeKey();
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test03()  throws Throwable  {
      DIN dIN0 = new DIN();
      DIN.DIN_updateDupCountLNRefAndNullTarget dIN_DIN_updateDupCountLNRefAndNullTarget0 = new DIN.DIN_updateDupCountLNRefAndNullTarget(dIN0, 0L);
      dIN_DIN_updateDupCountLNRefAndNullTarget0._this.getDupKey();
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test05()  throws Throwable  {
      DIN dIN0 = new DIN();
      ChildReference childReference0 = new ChildReference((Node) dIN0, (byte[]) null, (-1L));
      dIN0.setDupCountLN(childReference0);
      dIN0.getDupCountLNRef();
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test08()  throws Throwable  {
      DIN dIN0 = new DIN();
      DatabaseId databaseId0 = new DatabaseId();
      int int0 = dIN0.generateLevel(databaseId0, 0);
      assertEquals(0, int0);
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test10()  throws Throwable  {
      DIN dIN0 = new DIN();
      DIN.DIN_updateDupCountLNRefAndNullTarget dIN_DIN_updateDupCountLNRefAndNullTarget0 = new DIN.DIN_updateDupCountLNRefAndNullTarget(dIN0, 0L);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = dIN_DIN_updateDupCountLNRefAndNullTarget0._this.selectKey(byteArray0, (byte[]) null);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
      assertNull(byteArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.createNewInstance((byte[]) null, 336, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DIN dIN0 = new DIN();
      int int0 = dIN0.generateLevel((DatabaseId) null, 313);
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
      assertEquals(313, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.updateDupCountLNRefAndNullTarget((-709L));
      assertTrue(dIN0.getDirty());
  }

  @Test
  public void test16()  throws Throwable  {
      DIN dIN0 = new DIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(" expired. Locker ");
      // Undeclared exception!
      try { 
        dIN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DIN dIN0 = new DIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("i~=qIjA");
      // Undeclared exception!
      try { 
        dIN0.readFromLog(byteBuffer0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.readFromLog((ByteBuffer) null, (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getKeyComparator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getChildKey((IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.dumpLogAdditional((StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = null;
      try {
        dIN0 = new DIN((DatabaseImpl) null, byteArray0, 322, byteArray0, childReference0, (int) (byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = null;
      try {
        dIN0 = new DIN(databaseImpl0, byteArray0, (-688), byteArray0, childReference0, (-688));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DIN dIN0 = new DIN();
      String string0 = dIN0.dumpString(0, true);
      assertTrue(dIN0.needsSplitting());
      assertEquals("<din>\n  <dupkey></dupkey>\n    <lsn/>\n    <key v=\"\"/>\n    <target/>\n    <knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</din>", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.dumpString((-1), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DIN dIN0 = new DIN();
      String string0 = dIN0.beginTag();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Charset.forName(string0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <din>
         //
         assertThrownBy("java.nio.charset.Charset", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DIN dIN0 = new DIN();
      String string0 = dIN0.endTag();
      assertEquals(0, dIN0.getLevel());
      assertEquals("</din>", string0);
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test30()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.getDupCountLN();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DIN dIN0 = new DIN();
      String string0 = dIN0.dumpString((byte)4, false);
      assertEquals("      <dupkey></dupkey>\n        <lsn/>\n        <key v=\"\"/>\n        <target/>\n        <knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>\n      <node>0</node>\n      <idkey><key v=\"\"/></idkey>\n      <dirty val=\"false\"/>\n      <generation val=\"0\"/>\n      <level val=\"0\"/>\n      <isRoot val=\"false\"/>\n      <entries nEntries=\"0\">\n      </entries>\n", string0);
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test32()  throws Throwable  {
      DIN dIN0 = new DIN();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dIN0.dumpLogAdditional(stringBuffer0);
      assertEquals(150, stringBuffer0.capacity());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test34()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      LN lN0 = new LN(byteArray0);
      DIN.DIN_updateDupCountLN dIN_DIN_updateDupCountLN0 = new DIN.DIN_updateDupCountLN(dIN0, lN0);
      // Undeclared exception!
      try { 
        dIN_DIN_updateDupCountLN0._this.logInternal((LogManager) null, true, true, true, dIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DIN dIN0 = new DIN();
      TreeLocation treeLocation0 = new TreeLocation();
      boolean boolean0 = dIN0.matchLNByNodeId(treeLocation0, (-1L));
      assertFalse(boolean0);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test36()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[0];
      dIN0.selectKey(byteArray0, byteArray0);
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test38()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.accumulateStats((TreeWalkerStatsAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isDbRoot();
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
      assertFalse(boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.updateDupCountLN((Node) null);
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test42()  throws Throwable  {
      DIN dIN0 = new DIN();
      LockGrantType lockGrantType0 = LockGrantType.WAIT_NEW;
      Txn txn0 = new Txn();
      WriteLockInfo writeLockInfo0 = txn0.getWriteLockInfo(313);
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      byte[] byteArray0 = new byte[2];
      try { 
        dIN0.incrementDuplicateCount(lockResult0, byteArray0, txn0, false);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test43()  throws Throwable  {
      DIN dIN0 = new DIN();
      String string0 = dIN0.toString();
      assertTrue(dIN0.needsSplitting());
      assertEquals("<din>\n  <dupkey></dupkey>\n    <lsn/>\n    <key v=\"\"/>\n    <target/>\n    <knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</din>", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.updateDupCountLNRef(0L);
      assertTrue(dIN0.getDirty());
  }

  @Test
  public void test45()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getDupCountLNRef();
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test47()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getChildKey(dIN0);
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test48()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.containsDuplicates();
      assertTrue(dIN0.needsSplitting());
      assertTrue(boolean0);
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test50()  throws Throwable  {
      DIN dIN0 = new DIN();
      ChildReference childReference0 = new ChildReference((Node) dIN0, (byte[]) null, (-1L));
      dIN0.setDupCountLN(childReference0);
      // Undeclared exception!
      try { 
        dIN0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 130
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test53()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getLogType();
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test54()  throws Throwable  {
      DIN dIN0 = new DIN();
      DIN.DIN_updateDupCountLN dIN_DIN_updateDupCountLN0 = new DIN.DIN_updateDupCountLN(dIN0, dIN0);
      dIN_DIN_updateDupCountLN0.execute();
      // Undeclared exception!
      try { 
        dIN0.getDupCountLN();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DupCountLN
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }
}

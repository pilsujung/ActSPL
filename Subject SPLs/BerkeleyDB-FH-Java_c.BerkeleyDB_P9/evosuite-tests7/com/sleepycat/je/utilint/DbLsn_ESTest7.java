/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 14:09:51 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.FileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class DbLsn_ESTest7 extends DbLsn_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      long long0 = DbLsn.makeLsn(1078L, (-1697L));
      assertEquals(4634269710687L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      Long long0 = new Long(0L);
      long long1 = DbLsn.longToLsn(long0);
      assertTrue(long0.equals((Object)long1));
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(0L, (FileManager) null, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-275L), (-275L), (-275L));
      assertEquals(0L, long0);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = DbLsn.getFileNumber((-1L));
      assertEquals(4294967295L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance((-9223372036854775808L), (FileManager) null, (-1L), 121L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance((-537L), (FileManager) null, (-709L), (-537L));
      assertEquals(172L, long0);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(675L, 4294967308L, 675L);
      assertEquals(12L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-3655017168319L), (-9223372036854775808L), (-275L));
      assertEquals((-590557768598L), long0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = DbLsn.compareTo(0, 1L);
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      Long long0 = new Long(675L);
      long long1 = DbLsn.makeLsn((-1L), (long) long0);
      assertEquals((-4294966621L), long1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = DbLsn.dumpString(2673L, 0);
      assertEquals("<DbLsn val=\"0x0/0xa71\"/>", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(1205L);
      assertEquals(1205L, long0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.dumpString(0L, 1045);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1045
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = DbLsn.getFileNumber(255L);
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance(2150L, (FileManager) null, (-1116L), (-1116L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(2150L, (FileManager) null, 0L, 0L);
      assertEquals(2150L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(829L, 1L, 931L);
      assertEquals(828L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-4121L), (-1L), 957L);
      assertEquals(4114578664490L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-1000L), (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-1L), 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = DbLsn.compareTo((-2482L), 1229L);
      assertEquals(1, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = DbLsn.compareTo(3225L, (-1540L));
      assertEquals((-1), int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = DbLsn.compareTo(2L, 2L);
      assertEquals(0, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = DbLsn.longToLsn((Long) null);
      assertEquals((-1L), long0);
  }

  @Test
  public void test28()  throws Throwable  {
      Long long0 = new Long(4226L);
      long long1 = DbLsn.longToLsn(long0);
      assertEquals(4226L, long1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = DbLsn.toString(2150L);
      assertEquals("<DbLsn val=\"0x0/0x866\"/>", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = DbLsn.makeLsn(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = DbLsn.getNoFormatString(2204L);
      assertEquals("0x0/0x89c", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-9223372036854775808L), (-41L), 0L);
      assertEquals(4294967255L, long0);
  }
}

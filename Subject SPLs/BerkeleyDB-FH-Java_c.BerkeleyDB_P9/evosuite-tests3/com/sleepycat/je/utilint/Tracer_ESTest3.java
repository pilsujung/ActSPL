/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 11:19:19 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.logging.Level;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.RunRecoveryException;
import com.sleepycat.je.config.ConfigParam;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.log.LogEntryType;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class Tracer_ESTest3 extends Tracer_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      Tracer tracer0 = new Tracer("S-x{Z)L_`Bh");
      String string0 = tracer0.getMessage();
      assertEquals("S-x{Z)L_`Bh", string0);
  }


  @Test
  public void test02()  throws Throwable  {
      Tracer tracer0 = new Tracer();
      // Undeclared exception!
      try { 
        Charset.forName("<Dbg time=\"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <Dbg time=\"
         //
         assertThrownBy("java.nio.charset.Charset", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Tracer tracer0 = new Tracer("$0Q.");
      Object object0 = new Object();
      boolean boolean0 = tracer0.equals(object0);
      assertEquals("$0Q.", tracer0.getMessage());
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Tracer tracer0 = new Tracer("CleanLN:");
      tracer0.hashCode();
      assertEquals("CleanLN:", tracer0.getMessage());
  }

  @Test
  public void test17()  throws Throwable  {
      Tracer tracer0 = new Tracer((String) null);
      String string0 = tracer0.getMessage();
      assertNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      Level level0 = Level.CONFIG;
      // Undeclared exception!
      try { 
        Tracer.trace(level0, (EnvironmentImpl) null, "yC*)R5|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.Tracer", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Tracer tracer0 = new Tracer((String) null);
      String string0 = tracer0.toString();
      //  // Unstable assertion: assertEquals("2017-04-22 11:18:52.822/null", string0);
  }


  
}

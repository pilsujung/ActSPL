/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 02:06:38 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.cleaner.UtilizationTracker;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.dbi.INList;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.txn.Locker;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class LN_ESTest6 extends LN_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getTransactionalLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test01()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      LogEntryType logEntryType0 = fileSummaryLN0.getLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test02()  throws Throwable  {
      LN lN0 = new LN();
      byte[] byteArray0 = lN0.getData();
      assertNull(byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      lN0.getData();
      //  // Unstable assertion: assertEquals(820L, lN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      lN0.copyData();
      //  // Unstable assertion: assertEquals(800L, lN0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        nameLN0.delete(databaseImpl0, byteArray0, byteArray0, (byte)8, txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setSize(894);
      databaseEntry0.setPartial(894, 894, true);
      LN lN0 = null;
      try {
        lN0 = new LN(databaseEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.System", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LN lN0 = new LN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lN0.dumpLogAdditional(stringBuffer0, true);
      assertFalse(lN0.logEntryIsTransactional());
  }

  @Test
  public void test08()  throws Throwable  {
      TreeLocation treeLocation0 = new TreeLocation();
      DatabaseId databaseId0 = new DatabaseId(0);
      NameLN nameLN0 = new NameLN(databaseId0);
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Locker locker0 = null;
      // Undeclared exception!
      try { 
        nameLN0.delete(databaseImpl0, (byte[]) null, (byte[]) null, (-1L), (Locker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      lN0.makeDeleted();
      //  // Unstable assertion: assertEquals(671L, lN0.getNodeId());
  }

  @Test
  public void test10()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("DMW<]Aye1^v");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        nameLN0.writeToLog(byteBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      LN lN0 = new LN(byteArray0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        lN0.readFromLog(byteBuffer0, (byte) (-60));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (-4), 0);
      LN lN0 = new LN(databaseEntry0);
      // Undeclared exception!
      try { 
        lN0.readFromLog((ByteBuffer) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      // Undeclared exception!
      try { 
        mapLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      // Undeclared exception!
      try { 
        nameLN0.dumpLogAdditional((StringBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DatabaseId", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      LN lN0 = new LN(byteArray0);
      // Undeclared exception!
      try { 
        lN0.dumpLog((StringBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      LN lN0 = new LN();
      // Undeclared exception!
      try { 
        lN0.copyData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LN lN0 = null;
      try {
        lN0 = new LN((DatabaseEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-87), (int) (byte) (-87));
      LN lN0 = null;
      try {
        lN0 = new LN(databaseEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      boolean boolean0 = lN0.isDeleted();
      //  // Unstable assertion: assertEquals(560L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      boolean boolean0 = fileSummaryLN0.isDeleted();
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      LN lN0 = new LN();
      String string0 = lN0.endTag();
      assertEquals("</ln>", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        mapLN0.log((EnvironmentImpl) null, databaseId0, byteArray0, (byte)82, (Locker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      lN0.beginTag();
      //  // Unstable assertion: assertEquals(536L, lN0.getNodeId());
  }

  @Test
  public void test25()  throws Throwable  {
      LN lN0 = new LN();
      LogEntryType logEntryType0 = lN0.getLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      long long0 = nameLN0.getMemorySizeIncludedByParent();
      //  // Unstable assertion: assertEquals(511L, nameLN0.getNodeId());
      //  // Unstable assertion: assertEquals(56L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      LN lN0 = new LN();
      long long0 = lN0.getMemorySizeIncludedByParent();
      assertEquals(32L, long0);
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      StringWriter stringWriter0 = new StringWriter((int) (byte)0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lN0.dumpLog(stringBuffer0, true);
      //  // Unstable assertion: assertEquals(46, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(482L, lN0.getNodeId());
  }

  @Test
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("*K|b9G2c<jQ:YSuWQ{w");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      lN0.readFromLog(byteBuffer1, (byte) (-31));
      //  // Unstable assertion: assertEquals(463L, lN0.getLastId());
  }

  @Test
  public void test30()  throws Throwable  {
      LN lN0 = new LN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("CLn#GiqLu\"&D{'l]");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      lN0.writeToLog(byteBuffer1);
      assertNotSame(byteBuffer0, byteBuffer1);
  }

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LN lN0 = new LN(byteArray0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("DMW<]Aye1^v");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        lN0.writeToLog(byteBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      int int0 = lN0.getLogSize();
      //  // Unstable assertion: assertEquals(424L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals(9, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      lN0.dumpString((byte)97, true);
      //  // Unstable assertion: assertEquals(354L, lN0.getNodeId());
  }

  @Test
  public void test34()  throws Throwable  {
      LN lN0 = new LN();
      String string0 = lN0.dumpString(0, false);
      assertEquals("  <node>0</node>\n", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        nameLN0.delete(databaseImpl0, byteArray0, byteArray0, (-1L), txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test36()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        nameLN0.delete(databaseImpl0, byteArray0, byteArray0, (-31L), txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      LN lN0 = new LN(byteArray0);
      int int0 = lN0.getLogSize();
      //  // Unstable assertion: assertEquals(267L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals(14, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setPartial(894, 894, true);
      LN lN0 = new LN(databaseEntry0);
      //  // Unstable assertion: assertEquals(242L, lN0.getLastId());
  }

  @Test
  public void test39()  throws Throwable  {
      LN lN0 = new LN((byte[]) null);
      assertTrue(lN0.marshallOutsideWriteLatch());
  }

  @Test
  public void test40()  throws Throwable  {
      LN lN0 = new LN();
      boolean boolean0 = lN0.countAsObsoleteWhenLogged();
      assertFalse(boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      fileSummaryLN0.rebuildINList((INList) null);
      assertEquals("<fileSummaryLN>", fileSummaryLN0.beginTag());
  }

  @Test
  public void test42()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      boolean boolean0 = lN0.canBeAncestor(true);
      //  // Unstable assertion: assertEquals(238L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      boolean boolean0 = lN0.isSoughtNode((byte) (-128), false);
      //  // Unstable assertion: assertEquals(213L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      long long0 = fileSummaryLN0.getTransactionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      LN lN0 = new LN(byteArray0);
      lN0.getTransactionalLogType();
      //  // Unstable assertion: assertEquals(191L, lN0.getLastId());
  }

  @Test
  public void test46()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.accountForSubtreeRemoval((INList) null, (UtilizationTracker) null);
      assertFalse(nameLN0.isDeleted());
  }

  @Test
  public void test47()  throws Throwable  {
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        lN0.logProvisional((EnvironmentImpl) null, databaseId0, byteArray0, (byte)90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test48()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lN0.dumpLog(stringBuffer0, false);
      //  // Unstable assertion: assertEquals("<ln><node>180</node></ln>", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(180L, lN0.getNodeId());
  }

  @Test
  public void test49()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        lN0.delete(databaseImpl0, byteArray0, (byte[]) null, 1154L, (Locker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test50()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        nameLN0.modify(byteArray0, databaseImpl0, byteArray0, (-722L), (Locker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      LN lN0 = new LN(byteArray0);
      lN0.getData();
      //  // Unstable assertion: assertEquals(74L, lN0.getLastId());
  }

  @Test
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      LN lN0 = new LN(byteArray0);
      boolean boolean0 = lN0.logEntryIsTransactional();
      //  // Unstable assertion: assertEquals(30L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      fileSummaryLN0.addToDirtyMap(hashMap0);
      assertEquals(0L, fileSummaryLN0.getNodeId());
  }

  @Test
  public void test54()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      dupCountLN0.copyData();
      //  // Unstable assertion: assertEquals(1L, dupCountLN0.getLastId());
  }

  @Test
  public void test55()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      boolean boolean0 = nameLN0.isValidForDelete();
      assertFalse(boolean0);
  }
}

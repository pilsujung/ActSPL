/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 01:39:44 KST 2017
 */

package com.sleepycat.je.recovery;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.latch.LatchNotHeldException;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.Node;
import com.sleepycat.je.tree.Tree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class RootUpdater_ESTest6 extends RootUpdater_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      dIN0.latchNoWait(true);
      tree0.withRootLatchedExclusive(rootUpdater0);
      boolean boolean0 = rootUpdater0.getInserted();
      //  // Unstable assertion: assertEquals(49L, dIN0.getGeneration());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      dIN0.latchNoWait(true);
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (long) (byte)74);
      // Undeclared exception!
      try { 
        rootUpdater0.doWork(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      dIN0.latchNoWait(false);
      rootUpdater0.hook600();
  }

  @Test
  public void test03()  throws Throwable  {
      Tree tree0 = new Tree();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, (IN) null, 347L);
      // Undeclared exception!
      try { 
        rootUpdater0.hook600();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.recovery.RootUpdater", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dBIN0, (-1));
      try { 
        rootUpdater0.hook600();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[4];
      RootUpdater rootUpdater0 = new RootUpdater(tree0, (IN) null, (byte)0);
      ChildReference childReference0 = tree0.makeRootChildReference((Node) null, byteArray0, (-1L));
      // Undeclared exception!
      try { 
        rootUpdater0.doWork(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.recovery.RootUpdater", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dBIN0, (-1));
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = tree0.makeRootChildReference(dBIN0, byteArray0, (byte)24);
      try { 
        rootUpdater0.doWork(childReference0);
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      boolean boolean0 = rootUpdater0.getReplaced();
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      boolean boolean0 = rootUpdater0.getInserted();
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      dIN0.latchNoWait(true);
      tree0.withRootLatchedExclusive(rootUpdater0);
      boolean boolean0 = rootUpdater0.updateDone();
      //  // Unstable assertion: assertEquals(0L, dIN0.getGeneration());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      RootUpdater rootUpdater0 = new RootUpdater(tree0, dIN0, (-1));
      long long0 = rootUpdater0.getOriginalLsn();
      assertEquals((-1L), long0);
  }
}

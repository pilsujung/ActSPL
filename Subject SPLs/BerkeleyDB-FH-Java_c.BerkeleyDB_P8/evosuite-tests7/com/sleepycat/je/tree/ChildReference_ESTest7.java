/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:10:01 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class ChildReference_ESTest7 extends ChildReference_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.getTarget();
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test01()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[8];
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) (byte) (-32));
      childReference0.getTarget();
      assertFalse(childReference0.getMigrate());
      assertFalse(childReference0.isKnownDeleted());
      assertEquals((-32L), childReference0.getLsn());
  }

  @Test
  public void test02()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[6];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, 9223372036854775807L, (byte)97);
      childReference0.getTarget();
      assertTrue(childReference0.isKnownDeleted());
      assertFalse(childReference0.getMigrate());
      assertEquals(9223372036854775807L, childReference0.getLsn());
  }

  @Test
  public void test03()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      byte byte0 = childReference0.getState();
      assertEquals((byte)0, byte0);
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference();
      childReference0.setKey(byteArray0);
      byte byte0 = childReference0.getState();
      assertEquals((byte)2, byte0);
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test05()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      long long0 = childReference0.getLsn();
      assertEquals((-1L), long0);
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test06()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      byte[] byteArray0 = new byte[2];
      childReference0.setKey(byteArray0);
      childReference0.getKey();
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test07()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, 371L, (byte) (-86));
      DIN dIN0 = new DIN();
      FileSummaryLN fileSummaryLN1 = (FileSummaryLN)childReference0.fetchTarget(databaseImpl0, dIN0);
      //  // Unstable assertion: assertEquals(241L, fileSummaryLN1.getLastId());
  }

  @Test
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (-3162L), (byte)54);
      childReference0.setMigrate(true);
      assertEquals((-3162L), childReference0.getLsn());
      assertTrue(childReference0.getMigrate());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test10()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setLsn(13);
      try { 
        childReference0.fetchTarget((DatabaseImpl) null, (IN) null);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of 0x0/0xd state=2 java.lang.NullPointerException
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference();
      try { 
        childReference0.fetchTarget((DatabaseImpl) null, dBIN0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setLsn((-1355L));
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("_~tT$d6~?l<g)");
      childReference0.writeToLog(byteBuffer0);
      assertEquals((-1355L), childReference0.getLsn());
  }

  @Test
  public void test13()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      childReference0.dumpLog(stringBuffer0, false);
      assertEquals(102, stringBuffer0.length());
      assertEquals("<ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffff\"/></ref>", stringWriter0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) bIN0, byteArray0, 1290L, (byte)42);
      // Undeclared exception!
      try { 
        childReference0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, 0L);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("Z$s*+B-F?");
      // Undeclared exception!
      try { 
        childReference0.readFromLog(byteBuffer0, (byte) (-49));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.HeapByteBuffer", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[6];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, 9223372036854775807L, (byte)97);
      // Undeclared exception!
      try { 
        childReference0.readFromLog((ByteBuffer) null, (byte) (-110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) 0, (byte)116);
      // Undeclared exception!
      try { 
        childReference0.dumpString((byte) (-1), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      boolean boolean0 = childReference0.isKnownDeleted();
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, 0L);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("Z$s*+B-F?");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        childReference0.writeToLog(byteBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, 255L, (byte) (-1));
      assertTrue(childReference0.getMigrate());
      
      childReference0.setMigrate(false);
      assertFalse(childReference0.getMigrate());
  }

  @Test
  public void test22()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      assertFalse(childReference0.getMigrate());
      
      childReference0.setMigrate(true);
      boolean boolean0 = childReference0.getMigrate();
      assertTrue(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, 0L);
      boolean boolean0 = childReference0.getMigrate();
      assertFalse(boolean0);
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test24()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      String string0 = childReference0.dumpString(0, false);
      assertEquals("<lsn/>\n<key v=\"\"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) 0, (byte) (-1));
      boolean boolean0 = childReference0.isKnownDeleted();
      assertTrue(childReference0.getMigrate());
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IN iN0 = new IN();
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) 0);
      String string0 = childReference0.dumpString((byte)0, true);
      assertEquals("<DbLsn val=\"0x0/0x0\"/>\n<key v=\"0 \"/>\n<in>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</in>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (-4386L), (byte) (-54));
      String string0 = childReference0.toString();
      //  // Unstable assertion: assertEquals(56L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals("<DbLsn val=\"0xffffffff/0xffffeede\"/>\n<key v=\"0 0 0 0 \"/>\n<ln>\n  <node>56</node>\n  <data>0 0 0 0 </data>\n</ln>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"true\"/><dirty val=\"true\"/>", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) 0, (byte) (-1));
      byte byte0 = childReference0.getState();
      assertEquals((byte) (-1), byte0);
  }

  @Test
  public void test31()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.clearTarget();
      assertFalse(childReference0.isKnownDeleted());
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (-4386L), (byte) (-54));
      int int0 = childReference0.getLogSize();
      //  // Unstable assertion: assertEquals(32L, lN0.getLastId());
      //  // Unstable assertion: assertEquals(17, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IN iN0 = new IN();
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) 0);
      childReference0.getLsn();
      assertFalse(childReference0.isKnownDeleted());
      assertFalse(childReference0.getMigrate());
  }

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (-4386L), (byte) (-54));
      LN lN1 = (LN)childReference0.getTarget();
      //  // Unstable assertion: assertEquals(17L, lN1.getLastId());
  }

  @Test
  public void test36()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, 0L);
      childReference0.setTarget(fileSummaryLN0);
      assertFalse(childReference0.isKnownDeleted());
      assertFalse(childReference0.getMigrate());
  }

  @Test
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (-4386L), (byte) (-54));
      boolean boolean0 = childReference0.logEntryIsTransactional();
      //  // Unstable assertion: assertEquals(1L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) 0, (byte) (-1));
      childReference0.setLsn((byte)0);
      assertTrue(childReference0.getMigrate());
      assertTrue(childReference0.isKnownDeleted());
  }

  @Test
  public void test39()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.hook613((IN) null);
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, 94L);
      // Undeclared exception!
      try { 
        childReference0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IN iN0 = new IN();
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) 0);
      long long0 = childReference0.getTransactionId();
      assertFalse(childReference0.getMigrate());
      assertEquals(0L, long0);
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test42()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) 0, (byte) (-1));
      childReference0.setKey(byteArray0);
      assertTrue(childReference0.isKnownDeleted());
      assertTrue(childReference0.getMigrate());
  }
}

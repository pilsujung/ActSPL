/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:07:59 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Iterator;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.dbi.DatabaseId;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class BINReference_ESTest7 extends BINReference_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(0L, databaseId0, byteArray0);
      long long0 = bINReference0.getNodeId();
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1062);
      byte[] byteArray0 = new byte[9];
      BINReference bINReference0 = new BINReference((-993L), databaseId0, byteArray0);
      long long0 = bINReference0.getNodeId();
      assertEquals((-993L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      BINReference bINReference0 = new BINReference((byte)0, databaseId0, (byte[]) null);
      byte[] byteArray0 = bINReference0.getKey();
      assertNull(byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[0];
      BINReference bINReference0 = new BINReference((-700L), databaseId0, byteArray0);
      bINReference0.getKey();
      assertEquals((-700L), bINReference0.getNodeId());
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BINReference bINReference0 = new BINReference(312L, (DatabaseId) null, byteArray0);
      bINReference0.getDatabaseId();
      assertEquals(312L, bINReference0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray0);
      bINReference0.getDatabaseId();
      assertEquals((-1L), bINReference0.getNodeId());
  }

  @Test
  public void test06()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1));
      byte[] byteArray0 = new byte[3];
      BINReference bINReference0 = new BINReference(0L, databaseId0, byteArray0);
      DatabaseId databaseId1 = bINReference0.getDatabaseId();
      assertFalse(databaseId1.logEntryIsTransactional());
  }

  @Test
  public void test07()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[4];
      BINReference bINReference0 = new BINReference((-1330L), databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference((byte)0, databaseId0, (byte[]) null);
      boolean boolean0 = bINReference0.equals(bINReference1);
      assertFalse(bINReference1.equals((Object)bINReference0));
      assertFalse(boolean0);
      assertEquals((-1330L), bINReference0.getNodeId());
  }

  @Test
  public void test08()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[2];
      BINReference bINReference0 = new BINReference(0L, databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference((-488L), databaseId0, byteArray0);
      bINReference1.addDeletedKeys(bINReference0);
      bINReference0.addDeletedKeys(bINReference1);
      assertEquals((-488L), bINReference1.getNodeId());
  }

  @Test
  public void test09()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      BINReference bINReference0 = new BINReference((-1330L), databaseId0, byteArray0);
      Key key0 = new Key(bINReference0.idKey);
      bINReference0.addDeletedKey(key0);
      Key key1 = new Key((byte[]) null);
      // Undeclared exception!
      try { 
        bINReference0.removeDeletedKey(key1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1);
      byte[] byteArray0 = new byte[0];
      BINReference bINReference0 = new BINReference((-1983L), databaseId0, byteArray0);
      // Undeclared exception!
      try { 
        bINReference0.addDeletedKeys((BINReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BINReference", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1062);
      byte[] byteArray0 = new byte[9];
      BINReference bINReference0 = new BINReference((-993L), databaseId0, byteArray0);
      Key key0 = new Key((byte[]) null);
      // Undeclared exception!
      try { 
        bINReference0.addDeletedKey(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[2];
      BINReference bINReference0 = new BINReference(0L, databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference(2190L, databaseId0, (byte[]) null);
      BINReference bINReference2 = new BINReference(2190L, databaseId0, bINReference0.idKey);
      boolean boolean0 = bINReference1.equals(bINReference2);
      assertTrue(boolean0);
      assertFalse(bINReference0.equals((Object)bINReference2));
      assertEquals(2190L, bINReference2.getNodeId());
      assertFalse(bINReference2.equals((Object)bINReference0));
  }

  @Test
  public void test13()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[4];
      BINReference bINReference0 = new BINReference((-1330L), databaseId0, byteArray0);
      boolean boolean0 = bINReference0.equals((Object) null);
      assertEquals((-1330L), bINReference0.getNodeId());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1);
      byte[] byteArray0 = new byte[4];
      BINReference bINReference0 = new BINReference(628L, databaseId0, byteArray0);
      boolean boolean0 = bINReference0.equals(bINReference0);
      assertEquals(628L, bINReference0.getNodeId());
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(2859);
      byte[] byteArray0 = new byte[4];
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference((byte) (-112), databaseId0, byteArray0);
      boolean boolean0 = bINReference0.equals(bINReference1);
      assertFalse(bINReference1.equals((Object)bINReference0));
      assertFalse(boolean0);
      assertEquals((-112L), bINReference1.getNodeId());
  }

  @Test
  public void test16()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      Iterator iterator0 = bINReference0.getDeletedKeyIterator();
      assertEquals((-1L), bINReference0.getNodeId());
      assertNotNull(iterator0);
  }

  @Test
  public void test17()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1062);
      byte[] byteArray0 = new byte[9];
      BINReference bINReference0 = new BINReference((-993L), databaseId0, byteArray0);
      bINReference0.getDeletedKeyIterator();
      assertEquals((-993L), bINReference0.getNodeId());
  }

  @Test
  public void test18()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[4];
      BINReference bINReference0 = new BINReference((-1330L), databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      boolean boolean0 = bINReference0.deletedKeysExist();
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      boolean boolean0 = bINReference0.deletedKeysExist();
      assertFalse(boolean0);
      assertEquals((-1L), bINReference0.getNodeId());
  }

  @Test
  public void test20()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(1L, databaseId0, byteArray0);
      boolean boolean0 = bINReference0.deletedKeysExist();
      assertEquals(1L, bINReference0.getNodeId());
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = databaseId0.getBytes();
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      boolean boolean0 = bINReference0.hasDeletedKey(key0);
      assertEquals((-1L), bINReference0.getNodeId());
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[2];
      BINReference bINReference0 = new BINReference(0L, databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      boolean boolean0 = bINReference0.hasDeletedKey(key0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference((-4431L), (DatabaseId) null, byteArray0);
      bINReference0.addDeletedKey((Key) null);
      // Undeclared exception!
      try { 
        bINReference0.hasDeletedKey((Key) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[2];
      BINReference bINReference0 = new BINReference(0L, databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      boolean boolean0 = bINReference0.hasDeletedKey(key0);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = databaseId0.getBytes();
      byte[] byteArray1 = new byte[8];
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray1);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      Key key1 = new Key(bINReference0.idKey);
      bINReference0.removeDeletedKey(key1);
      assertTrue(bINReference0.deletedKeysExist());
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(1L, databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      Key key0 = new Key(byteArray0);
      bINReference0.removeDeletedKey(key0);
      assertEquals(1L, bINReference0.getNodeId());
  }

  @Test
  public void test28()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      BINReference bINReference0 = new BINReference((-1L), databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      bINReference0.addDeletedKeys(bINReference0);
      assertEquals((-1L), bINReference0.getNodeId());
  }

  @Test
  public void test29()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[4];
      BINReference bINReference0 = new BINReference((-1330L), databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      bINReference0.addDeletedKey(key0);
      assertEquals((-1330L), bINReference0.getNodeId());
  }

  @Test
  public void test30()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(1L, databaseId0, byteArray0);
      String string0 = bINReference0.toString();
      assertEquals("idKey=key=<key v=\"0 0 0 0 0 0 \"/> nodeId = 1 db=-1096 deletedKeys=null", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1062);
      byte[] byteArray0 = new byte[9];
      BINReference bINReference0 = new BINReference((-993L), databaseId0, byteArray0);
      bINReference0.getDatabaseId();
      assertEquals((-993L), bINReference0.getNodeId());
  }

  @Test
  public void test32()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(1L, databaseId0, byteArray0);
      long long0 = bINReference0.getNodeId();
      assertEquals(1L, long0);
  }

  @Test
  public void test33()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(1L, databaseId0, byteArray0);
      bINReference0.getData();
      assertEquals(1L, bINReference0.getNodeId());
  }

  @Test
  public void test34()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1062);
      byte[] byteArray0 = new byte[9];
      BINReference bINReference0 = new BINReference((-993L), databaseId0, byteArray0);
      bINReference0.hashCode();
      assertEquals((-993L), bINReference0.getNodeId());
  }

  @Test
  public void test35()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1096));
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(1L, databaseId0, byteArray0);
      byte[] byteArray1 = bINReference0.getKey();
      assertNotNull(byteArray1);
      assertEquals(1L, bINReference0.getNodeId());
  }
}

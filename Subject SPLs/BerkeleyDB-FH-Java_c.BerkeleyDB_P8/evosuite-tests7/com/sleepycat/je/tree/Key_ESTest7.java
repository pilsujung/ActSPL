/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:26:56 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.Comparator;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class Key_ESTest7 extends Key_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test
  public void test01()  throws Throwable  {
      Key key0 = new Key((byte[]) null);
      byte[] byteArray0 = key0.getKey();
      assertNull(byteArray0);
  }

  @Test
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = key0.getKey();
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = new byte[6];
      Key key1 = new Key(byteArray1);
      int int0 = key0.compareTo(key1);
      assertEquals(236, int0);
      assertFalse(key1.equals((Object)key0));
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = new byte[8];
      Key key1 = new Key(byteArray1);
      int int0 = key0.compareTo(key1);
      assertEquals((-3), int0);
      assertFalse(key1.equals((Object)key0));
  }

  @Test
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Key.getNoFormatString(byteArray0);
      assertEquals("key=<key v=\"0 0 \"/>", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[0];
      int int0 = Key.compareKeys(byteArray1, byteArray0, (Comparator) null);
      assertEquals((-3), int0);
  }

  @Test
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      Key key0 = new Key(byteArray0);
      key0.hashCode();
  }

  @Test
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Key key0 = new Key(byteArray0);
      key0.hashCode();
  }

  @Test
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key0.equals(key1);
      assertFalse(boolean0);
      assertFalse(key1.equals((Object)key0));
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = new byte[3];
      databaseEntry0.setData(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Key.makeKey((DatabaseEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 0, (int) (byte) (-80));
      // Undeclared exception!
      try { 
        Key.makeKey(databaseEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Key key0 = new Key((byte[]) null);
      // Undeclared exception!
      try { 
        key0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Key.dumpString(byteArray0, 1909);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1909
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Key key0 = new Key(byteArray0);
      Integer integer0 = new Integer((int) (byte)87);
      // Undeclared exception!
      try { 
        key0.compareTo(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.sleepycat.je.tree.Key
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Key.compareKeys(byteArray0, (byte[]) null, (Comparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      Key.dumpString((byte[]) null, (byte)29);
      Key key0 = new Key(byteArray0);
      key0.equals(key0);
      key0.equals("                             <key v=\"\"/>");
      //  // Unstable assertion: assertFalse(Key.DUMP_INT_BINDING);
      
      key0.DUMP_INT_BINDING = true;
      int int0 = key0.compareTo(key0);
      Key.getNoFormatString(byteArray0);
      Key key1 = new Key(byteArray0);
      Object object0 = new Object();
      Key.getNoFormatString((byte[]) null);
      boolean boolean0 = Key.DUMP_BINARY;
      Integer integer0 = new Integer(0);
      //  // Unstable assertion: assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)0;
      String string0 = Key.dumpString(byteArray0, (byte)0);
      assertEquals("<key v=\"0 0 0 0 0 0 0 0 \"/>", string0);
      
      Key key0 = new Key((byte[]) null);
      String string1 = Key.getNoFormatString((byte[]) null);
      assertEquals("key=<key v=\"<null>\"/>", string1);
      
      String string2 = Key.dumpString((byte[]) null, (byte)0);
      assertEquals("<key v=\"<null>\"/>", string2);
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[4] = (byte)0;
      Key.dumpString(byteArray0, (byte)0);
      Key key0 = new Key((byte[]) null);
      Key.getNoFormatString((byte[]) null);
      // Undeclared exception!
      try { 
        key0.compareTo(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Key.dumpString(byteArray0, (byte)0);
      assertEquals("<key v=\"0 0 0 0 0 0 0 0 \"/>", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byte[] byteArray1 = new byte[2];
      int int0 = Key.compareKeys(byteArray0, byteArray1, (Comparator) null);
      assertEquals(252, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = Key.compareKeys(byteArray0, byteArray0, (Comparator) null);
      assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = new byte[0];
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key0.equals(key1);
      assertFalse(key1.equals((Object)key0));
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Key key0 = new Key((byte[]) null);
      // Undeclared exception!
      try { 
        key0.equals(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Key key0 = new Key(byteArray0);
      // Undeclared exception!
      try { 
        key0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = Key.makeKey(databaseEntry0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = new byte[0];
      databaseEntry0.setData(byteArray0, 505, 505);
      // Undeclared exception!
      try { 
        Key.makeKey(databaseEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.System", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = key0.getKey();
      assertFalse(byteArray0.equals((Object)byteArray1));
  }
}

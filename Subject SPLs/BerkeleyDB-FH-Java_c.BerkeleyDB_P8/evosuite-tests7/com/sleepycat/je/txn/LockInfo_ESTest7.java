/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:50:26 KST 2017
 */

package com.sleepycat.je.txn;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class LockInfo_ESTest7 extends LockInfo_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      Txn txn0 = new Txn();
      LockType lockType0 = LockType.RANGE_WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) txn0, lockType0);
      Txn txn1 = (Txn)lockInfo0.getLocker();
      assertFalse(txn1.getDefaultNoWait());
  }

  @Test
  public void test01()  throws Throwable  {
      LockType lockType0 = LockType.WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      LockType lockType1 = LockType.RANGE_WRITE;
      lockInfo0.setLockType(lockType1);
      LockType lockType2 = lockInfo0.getLockType();
      assertFalse(lockType2.equals((Object)lockType0));
  }

  @Test
  public void test02()  throws Throwable  {
      Txn txn0 = new Txn();
      LockType lockType0 = LockType.RANGE_INSERT;
      LockInfo lockInfo0 = new LockInfo((Locker) txn0, lockType0);
      LockType lockType1 = lockInfo0.getLockType();
      assertSame(lockType1, lockType0);
  }

  @Test
  public void test03()  throws Throwable  {
      LockType lockType0 = LockType.WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      String string0 = lockInfo0.toString();
      //  // Unstable assertion: assertEquals("<LockInfo locker=\"null\" type=\"WRITE\"/> lock taken at: com.sleepycat.je.txn.LockInfo$StackTraceAtLockTime\r\n\tat com.sleepycat.je.txn.LockInfo.&lt;init&gt;(LockInfo.java:53)\r\n\tat sun.reflect.GeneratedConstructorAccessor24.newInstance(Unknown Source)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:422)\r\n\tat org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:241)\r\n\tat org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)\r\n\tat org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:196)\r\n\tat org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)\r\n\tat org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)\r\n\tat org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      LockType lockType0 = LockType.WRITE;
      Txn txn0 = new Txn();
      LockInfo lockInfo0 = new LockInfo((Locker) txn0, lockType0);
      LockInfo lockInfo1 = (LockInfo)lockInfo0.clone();
      String string0 = lockInfo1.toString();
      assertEquals("<LockInfo locker=\"0__Txn\" type=\"WRITE\"/>", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      LockType lockType0 = LockType.WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      Locker locker0 = lockInfo0.getLocker();
      assertNull(locker0);
  }

  @Test
  public void test07()  throws Throwable  {
      LockInfo.setDeadlockStackTrace(true);
  }

  @Test
  public void test08()  throws Throwable  {
      LockInfo lockInfo0 = new LockInfo((Locker) null, (LockType) null);
      lockInfo0.setLocker((Locker) null);
      //  // Unstable assertion: assertFalse(lockInfo0.getDeadlockStackTrace());
  }

  @Test
  public void test09()  throws Throwable  {
      LockInfo lockInfo0 = new LockInfo((Locker) null, (LockType) null);
      LockType lockType0 = lockInfo0.getLockType();
      assertNull(lockType0);
  }

  @Test
  public void test10()  throws Throwable  {
      LockInfo lockInfo0 = new LockInfo((Locker) null, (LockType) null);
      lockInfo0.dump();
      //  // Unstable assertion: assertFalse(lockInfo0.getDeadlockStackTrace());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:36:09 KST 2017
 */

package com.sleepycat.je.log;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Set;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.entry.DeletedDupLNLogEntry;
import com.sleepycat.je.log.entry.SingleItemLogEntry;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.MapLN;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class LogEntryType_ESTest7 extends LogEntryType_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_ROOT;
      byte byte0 = logEntryType0.getVersion();
      assertEquals((byte)1, byte0);
  }

  @Test
  public void test01()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)23, (byte) (-20));
      byte byte0 = logEntryType0.getVersion();
      assertFalse(logEntryType0.isNodeType());
      assertEquals((byte) (-20), byte0);
  }

  @Test
  public void test02()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)0, (byte)92);
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test03()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      LogEntryType logEntryType0 = dBIN0.getLogType();
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte)15, byte0);
  }

  @Test
  public void test04()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DEL_DUPLN_TRANSACTIONAL;
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = (DeletedDupLNLogEntry)logEntryType0.getSharedLogEntry();
      assertTrue(deletedDupLNLogEntry0.isTransactional());
  }

  @Test
  public void test05()  throws Throwable  {
      byte byte0 = LogEntryType.clearProvisional((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test06()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_PREPARE;
      DIN dIN0 = new DIN();
      LogEntryType logEntryType1 = dIN0.getLogType();
      boolean boolean0 = logEntryType0.equals(logEntryType1);
      assertFalse(boolean0);
      assertFalse(logEntryType1.equals((Object)logEntryType0));
  }

  @Test
  public void test07()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DEL_DUPLN_TRANSACTIONAL;
      boolean boolean0 = logEntryType0.equalsType((byte)47);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_LN;
      boolean boolean0 = logEntryType0.equalsType((byte)0, (byte)0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)26);
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte) (-100));
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte byte0 = LogEntryType.setProvisional((byte) (-35));
      assertEquals((byte) (-35), byte0);
  }

  @Test
  public void test12()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)27, (byte)27);
      assertNotNull(logEntryType0);
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test13()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)0, (byte)0);
      assertNull(logEntryType0);
  }

  @Test
  public void test14()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)24, (byte) (-17));
      assertNotNull(logEntryType0);
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test15()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DBIN;
      boolean boolean0 = logEntryType0.isNodeType();
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte) (-33), (byte) (-33));
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_PREPARE;
      SingleItemLogEntry singleItemLogEntry0 = (SingleItemLogEntry)logEntryType0.getNewLogEntry();
      assertNotNull(singleItemLogEntry0);
  }

  @Test
  public void test18()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)27, (byte)27);
      logEntryType0.hashCode();
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test19()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-18), (byte)53);
      DIN dIN0 = new DIN();
      LogEntryType logEntryType1 = dIN0.getLogType();
      boolean boolean0 = logEntryType0.equals(logEntryType1);
      assertTrue(logEntryType0.isNodeType());
      assertFalse(logEntryType1.equals((Object)logEntryType0));
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      boolean boolean0 = logEntryType0.equals(logEntryType0);
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-18), (byte)53);
      LogEntryType logEntryType1 = LogEntryType.findType((byte)53, (byte)53);
      boolean boolean0 = logEntryType0.equals(logEntryType1);
      assertFalse(boolean0);
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test22()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)0, (byte)92);
      boolean boolean0 = logEntryType0.equalsType((byte)0);
      assertTrue(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DBIN;
      boolean boolean0 = logEntryType0.equalsType((byte) (-3));
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN;
      boolean boolean0 = logEntryType0.equalsType((byte)6, (byte) (-8));
      assertTrue(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getLogType();
      boolean boolean0 = logEntryType0.equalsType((byte)23, (byte)23);
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)119);
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)27);
      assertTrue(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)0);
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = LogEntryType.isProvisional((byte) (-62));
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      boolean boolean0 = LogEntryType.isProvisional((byte)53);
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)13, (byte)13);
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test32()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte) (-13), (byte) (-13));
      assertNull(logEntryType0);
  }

  @Test
  public void test33()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-18), (byte)53);
      boolean boolean0 = logEntryType0.isNodeType();
      assertTrue(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_PREPARE;
      boolean boolean0 = logEntryType0.isNodeType();
      assertFalse(boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)15, (byte)15);
      assertTrue(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)57, (byte)0);
      assertFalse(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN_TRANSACTIONAL;
      byte byte0 = logEntryType0.getVersion();
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test38()  throws Throwable  {
      Set set0 = LogEntryType.getAllTypes();
      assertEquals(27, set0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-18), (byte)53);
      String string0 = logEntryType0.toString();
      assertTrue(logEntryType0.isNodeType());
      assertEquals("null/53", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      byte byte0 = LogEntryType.clearProvisional((byte)123);
      assertEquals((byte)123, byte0);
  }

  @Test
  public void test41()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)113, (byte) (-5));
      logEntryType0.getSharedLogEntry();
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test42()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-18), (byte)53);
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte) (-18), byte0);
  }

  @Test
  public void test43()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-18), (byte)53);
      // Undeclared exception!
      try { 
        logEntryType0.getNewLogEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogEntryType", e);
      }
  }
}

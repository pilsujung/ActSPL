/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 22:05:09 KST 2017
 */

package com.sleepycat.je.util;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.fail;

import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.Reader;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.Environment;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class DbLoad_ESTest7 extends DbLoad_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        DbLoad.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j;. ";
      stringArray0[1] = "j;. ";
      stringArray0[2] = "-h";
      stringArray0[3] = "`>eulAR.";
      stringArray0[4] = " but the JVM is only configured for ";
      stringArray0[5] = "L;j~.tp]$'=rj4 4+(";
      stringArray0[6] = "je.env.isTransactional";
      stringArray0[7] = "-h";
      stringArray0[8] = "Invalid header parameter: ";
      try { 
        DbLoad.main(stringArray0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // java.io.IOException: \uD30C\uC77C \uC774\uB984, \uB514\uB809\uD130\uB9AC \uC774\uB984 \uB610\uB294 \uBCFC\uB968 \uB808\uC774\uBE14 \uAD6C\uBB38\uC774 \uC798\uBABB\uB418\uC5C8\uC2B5\uB2C8\uB2E4
         //
         assertThrownBy("com.sleepycat.je.dbi.DbEnvPool", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader((Reader) pipedReader0, 2420);
      dbLoad0.setInputReader(bufferedReader0);
      try { 
        dbLoad0.load();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedReader", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      lineNumberReader0.read(charArray0);
      dbLoad0.setInputReader(lineNumberReader0);
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a database name if -l not supplied.
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      dbLoad0.setInputReader(lineNumberReader0);
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid header parameter: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[7];
          stringArray0[0] = "-c";
          stringArray0[1] = "6<|J9qbZEg5=7}";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.-1\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.printUsage(DbLoad.java:78)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:140)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test07()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setTextFileMode(true);
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a database name if -l not supplied.
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setProgressInterval(590L);
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-h";
      stringArray0[1] = "Xg@";
      stringArray0[2] = "-f requires an argument";
      stringArray0[3] = "";
      stringArray0[4] = "-f";
      stringArray0[5] = "X}r-v%#J:mVs";
      stringArray0[6] = "' is not understood.";
      stringArray0[7] = "^Hy<gP}H1";
      try { 
        DbLoad.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // X}r-v%#J:mVs (\uC9C0\uC815\uB41C \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4)
         //
         assertThrownBy("java.io.FileInputStream", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-v requires -f";
      stringArray0[1] = "-n";
      stringArray0[2] = "-v";
      // Undeclared exception!
      try { 
        DbLoad.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[8];
          stringArray0[0] = "XWs`%^9];2";
          stringArray0[1] = ";AL";
          stringArray0[2] = "gX";
          stringArray0[3] = "secConfig.getForeignKeyNullifier() and getForeignMultiKeyNullifier() may not both be non-null";
          stringArray0[4] = "gX";
          stringArray0[5] = "-h is a required argument";
          stringArray0[6] = "-s reuires an ar4ument";
          stringArray0[7] = "-c";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.-1\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.printUsage(DbLoad.java:78)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:144)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[3];
          stringArray0[0] = "Invalid header parameter: ";
          stringArray0[1] = "5'^";
          stringArray0[2] = "-s";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.-1\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.printUsage(DbLoad.java:78)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:131)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[5];
          stringArray0[0] = "[-c name=value]      # config values";
          stringArray0[1] = " SecondaryKeyCreator\n";
          stringArray0[2] = "%b=3";
          stringArray0[3] = "gDz>X";
          stringArray0[4] = "-h";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.-1\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.printUsage(DbLoad.java:78)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:123)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[3];
          stringArray0[0] = "-f";
          stringArray0[2] = "-f";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.-1\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.printUsage(DbLoad.java:78)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:115)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[22];
          stringArray0[0] = "-f requires an argument";
          stringArray0[1] = "n";
          stringArray0[2] = "-V";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.0\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:108)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9S9l6";
      stringArray0[1] = "-h is a{required argument";
      stringArray0[2] = "3";
      stringArray0[3] = "@>^jEiK@(p?Pa{^dQ<X";
      stringArray0[4] = "-I";
      // Undeclared exception!
      try { 
        DbLoad.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[9];
          stringArray0[0] = "       [-v]                 # show progress\n";
          stringArray0[1] = "+\u00000\u0000";
          stringArray0[2] = "g1~ze2RgV^/jyxd";
          stringArray0[3] = "true";
          stringArray0[4] = "# If true, operates in an in-memory fashion without\n# flushing the log to disk. The system operates until it runs\n# out of memory, in which case a java.lang.OutOfMemory error is\n# thrown.";
          stringArray0[5] = "[-c name=value]      # config values";
          stringArray0[6] = "-s";
          stringArray0[8] = "-T";
          // Undeclared exception!
          try { 
            DbLoad.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"exitVM.-1\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkExit(SecurityManager.java:761)
             // java.lang.Runtime.exit(Runtime.java:107)
             // java.lang.System.exit(System.java:971)
             // com.sleepycat.je.util.DbLoad.printUsage(DbLoad.java:78)
             // com.sleepycat.je.util.DbLoad.parseArgs(DbLoad.java:152)
             // com.sleepycat.je.util.DbLoad.main(DbLoad.java:64)
             // sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:497)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             assertThrownBy("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test18()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setEnv((Environment) null);
  }

  @Test
  public void test19()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setDbName("");
      dbLoad0.setTextFileMode(true);
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setIgnoreUnknownConfig(true);
  }

  @Test
  public void test21()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setTotalLoadBytes((-2831L));
  }

  @Test
  public void test22()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.hook835();
  }

  @Test
  public void test23()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setNoOverwrite(false);
  }

  @Test
  public void test24()  throws Throwable  {
      DbLoad dbLoad0 = new DbLoad();
      dbLoad0.setProgressInterval((-2831L));
      // Undeclared exception!
      try { 
        dbLoad0.load();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbLoad", e);
      }
  }
}

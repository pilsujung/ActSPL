/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 02:43:19 KST 2017
 */

package com.sleepycat.je.util;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.fail;

import java.io.OutputStream;
import java.io.PrintStream;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.bind.tuple.TupleBase;
import com.sleepycat.bind.tuple.TupleOutput;
import com.sleepycat.je.Database;
import com.sleepycat.je.Environment;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class DbCacheSize_ESTest6 extends DbCacheSize_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      TupleOutput tupleOutput0 = TupleBase.newOutput();
      PrintStream printStream0 = new PrintStream((OutputStream) tupleOutput0);
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords(printStream0, (Environment) null, (Database) null, (byte)17, (byte)32, (-1912200965), true);
  }

  @Test
  public void test02()  throws Throwable  {
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords((PrintStream) null, (Environment) null, (Database) null, 422L, 5, 0, false);
      // Undeclared exception!
      try { 
        dbCacheSize_DbCacheSize_insertRecords0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize$DbCacheSize_insertRecords", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords((PrintStream) null, (Environment) null, (Database) null, 422L, (-6), 0, false);
      // Undeclared exception!
      try { 
        dbCacheSize_DbCacheSize_insertRecords0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize$DbCacheSize_insertRecords", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords((PrintStream) null, (Environment) null, (Database) null, 8, 39, 8, true);
      dbCacheSize_DbCacheSize_insertRecords0.records = (-2257L);
      dbCacheSize_DbCacheSize_insertRecords0.execute();
  }

  @Test
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[1];
          stringArray0[0] = "F";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-measurerandom";
      stringArray0[1] = "-measurerandom";
      stringArray0[2] = "-measure";
      stringArray0[3] = "\n  [-data <bytes>]";
      DbCacheSize.main(stringArray0);
  }

  @Test
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[9];
          stringArray0[0] = "-measurerandom";
          stringArray0[1] = "T:gIu!b7m&5R";
          stringArray0[2] = "-measure";
          stringArray0[3] = "-measurerandom";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[7];
          stringArray0[0] = "-density";
          stringArray0[1] = "+";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[7];
          stringArray0[0] = "-density";
          stringArray0[1] = "-nINsLoaded=";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[8];
          stringArray0[0] = "-data";
          stringArray0[1] = "Gd";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[8];
          stringArray0[0] = "-data";
          stringArray0[1] = "-data";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[3];
          stringArray0[0] = "-key";
          stringArray0[1] = "nINsLoaded=";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[3];
          stringArray0[0] = "-key";
          stringArray0[1] = "-key";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[0];
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test15()  throws Throwable  {
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords((PrintStream) null, (Environment) null, (Database) null, 8, 39, 8, true);
      // Undeclared exception!
      try { 
        dbCacheSize_DbCacheSize_insertRecords0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize$DbCacheSize_insertRecords", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DbCacheSize dbCacheSize0 = new DbCacheSize();
  }

  
}

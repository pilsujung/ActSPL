/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:37:48 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.cleaner.UtilizationTracker;
import com.sleepycat.je.dbi.CursorImpl;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.dbi.INList;
import com.sleepycat.je.txn.LockGrantType;
import com.sleepycat.je.txn.LockResult;
import com.sleepycat.je.txn.WriteLockInfo;
import com.sleepycat.je.utilint.TestHook;

import de.ovgu.cide.jakutil.ReturnBoolean;
import de.ovgu.cide.jakutil.ReturnObject;
import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class Tree_ESTest7 extends Tree_ESTest_scaffolding7 {

  @Test
  public void test000()  throws Throwable  {
      Tree tree0 = new Tree();
      LN lN0 = new LN();
      DIN dIN0 = new DIN();
      Tree tree1 = new Tree();
      // Undeclared exception!
      try { 
        tree1.getLastNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test001()  throws Throwable  {
      Tree tree0 = new Tree();
      EnvironmentConfig environmentConfig0 = null;
      try {
        environmentConfig0 = new EnvironmentConfig((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.EnvironmentMutableConfig", e);
      }
  }

  @Test
  public void test002()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[0];
      NameLN nameLN0 = new NameLN();
      long long0 = 0L;
      boolean boolean0 = false;
      CursorImpl cursorImpl0 = null;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, long0, boolean0);
      EnvironmentImpl environmentImpl0 = null;
      try {  
      environmentImpl0 = tree_Tree_searchSplitsAllowed0.env;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test003()  throws Throwable  {
      Tree tree0 = new Tree();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        tree0.getFirstNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test004()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[18];
      LN lN0 = null;
      File file0 = null;
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      EnvironmentImpl environmentImpl0 = null;
      try {
        environmentImpl0 = new EnvironmentImpl(file0, environmentConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.FileManager", e);
      }
  }

  @Test
  public void test005()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      SearchResult searchResult0 = tree0.getParentINForChildIN((IN) dIN0, false, true);
      assertEquals((-1), searchResult0.index);
  }

  @Test
  public void test006()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook733();
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test007()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook730((IN) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test008()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook728();
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test009()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN();
      boolean boolean0 = true;
      dupCountLN0.dumpString(0, true);
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      EnvironmentImpl environmentImpl0 = null;
      try {
        environmentImpl0 = new EnvironmentImpl((File) null, environmentConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.FileManager", e);
      }
  }

  @Test
  public void test010()  throws Throwable  {
      Tree tree0 = new Tree();
      ArrayList<IN> arrayList0 = new ArrayList<IN>();
      tree0.hook697(arrayList0);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test011()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook690((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test012()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook687();
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test013()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook680((IN) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test014()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      tree0.hook679(dBIN0);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test015()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook678(dIN0);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test016()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test017()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      // Undeclared exception!
      try { 
        tree0.rebuildINList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test018()  throws Throwable  {
      Tree tree0 = new Tree();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        tree0.readFromLog(byteBuffer0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test019()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.readFromLog((ByteBuffer) null, (byte) (-51));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test020()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook715(345);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test021()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook714((INList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test022()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook701(false, (IN) null);
        fail("Expecting exception: ReturnObject");
      
      } catch(ReturnObject e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test023()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        tree0.hook698((IN) null, byteArray0, (-262), true, (-262), (IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test024()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        tree0.hook686(true, false, byteArray0, (IN) null, (IN) null, (IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test025()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        tree0.hook686(false, false, byteArray0, (IN) null, (IN) null, (IN) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test026()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      DIN dIN0 = new DIN();
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        tree0.hook685(treeLocation0, (byte[]) null, dIN0, nameLN0, true, false, false, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test027()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook671((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test028()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook670((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test029()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.getPrevBin((BIN) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test030()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.dumpString((-1048));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1048
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test031()  throws Throwable  {
      Tree tree0 = new Tree();
      String string0 = tree0.dumpString((byte)0);
      assertEquals("<tree>\n</tree>", string0);
  }

  @Test
  public void test032()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[3];
      DIN dIN0 = new DIN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.LEFT;
      BINBoundary bINBoundary0 = new BINBoundary();
      // Undeclared exception!
      try { 
        tree0.searchSubTree(dIN0, byteArray0, tree_SearchType0, 0L, bINBoundary0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // searchSubTree passed key and left/right search
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test033()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[6];
      BINBoundary bINBoundary0 = new BINBoundary();
      tree0.search(byteArray0, (Tree.SearchType) null, (byte)1, bINBoundary0, false);
      //  // Unstable assertion: assertEquals(364L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test034()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[8];
      LinkedList<DIN> linkedList0 = new LinkedList<DIN>();
      tree0.getParentINForChildIN((-1829L), false, false, byteArray0, byteArray0, false, true, (int) (byte) (-63), (List) linkedList0, false);
      //  // Unstable assertion: assertEquals(351L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test035()  throws Throwable  {
      Tree tree0 = new Tree();
      LinkedList<DIN> linkedList0 = new LinkedList<DIN>();
      // Undeclared exception!
      try { 
        tree0.getParentINForChildIN((IN) null, true, true, 0, (List) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test036()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SearchResult searchResult0 = tree0.getParentINForChildIN((IN) dIN0, true, true, (-3340), (List) arrayList0);
      assertFalse(searchResult0.exactParentFound);
  }

  @Test
  public void test037()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      // Undeclared exception!
      try { 
        tree0.setDatabase(databaseImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test038()  throws Throwable  {
      Tree tree0 = new Tree();
      IN iN0 = tree0.getRootIN(false);
      assertNull(iN0);
  }

  @Test
  public void test039()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        tree0.hook754(dBIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test040()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference();
      tree0.setRoot(childReference0, false);
      try { 
        tree0.getParentINForChildIN((-1L), false, false, byteArray0, byteArray0, false, false, (int) (byte) (-66), (List) null, false);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test041()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        tree0.hook698(dIN0, byteArray0, (byte)3, true, (byte)112, (IN) null);
        fail("Expecting exception: ReturnObject");
      
      } catch(ReturnObject e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test042()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      BIN bIN0 = tree0.getNextBin(dBIN0, true);
      assertNull(bIN0);
  }

  @Test
  public void test043()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[0];
      TreeLocation treeLocation0 = new TreeLocation();
      MapLN mapLN0 = new MapLN(databaseImpl0);
      tree0.hook683(treeLocation0, byteArray0, (byte[]) null, mapLN0, false, false, false, false, false, true, mapLN0);
      //  // Unstable assertion: assertEquals(326L, mapLN0.getLastId());
      //  // Unstable assertion: assertEquals(325L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test044()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      tree0.hook683(treeLocation0, (byte[]) null, (byte[]) null, (LN) null, true, true, false, true, false, true, (Node) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Tree tree0 = new Tree();
      tree0.delete(byteArray0, (UtilizationTracker) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Tree tree0 = new Tree();
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, 9223372036854775807L, (byte) (-26));
      tree0.setRoot(childReference0, false);
      try { 
        tree0.delete(byteArray0, (UtilizationTracker) null);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of 0x7fffffff/0xffffffff state=-26 java.lang.NullPointerException
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test048()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.validateINList((IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test049()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        tree0.validateINList(dBIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test050()  throws Throwable  {
      Tree tree0 = new Tree();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      tree0.dumpLog(stringBuffer0, false);
      assertEquals("<root></root>", stringBuffer0.toString());
      assertEquals("<root></root>", stringWriter0.toString());
  }

  @Test
  public void test051()  throws Throwable  {
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("!");
      Tree tree0 = new Tree();
      tree0.readFromLog(byteBuffer0, (byte) (-72));
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test
  public void test052()  throws Throwable  {
      Tree tree0 = new Tree();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("o?<?i+0*fab8ty_3");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      tree0.writeToLog(byteBuffer1);
      assertTrue(byteBuffer1.hasRemaining());
  }

  @Test
  public void test053()  throws Throwable  {
      Tree tree0 = new Tree();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        tree0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test054()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      int int0 = tree0.getLogSize();
      //  // Unstable assertion: assertEquals(318L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test
  public void test055()  throws Throwable  {
      Tree tree0 = new Tree();
      NameLN nameLN0 = new NameLN();
      byte[] byteArray0 = new byte[1];
      LockGrantType lockGrantType0 = LockGrantType.EXISTING;
      LockResult lockResult0 = new LockResult(lockGrantType0, (WriteLockInfo) null);
      // Undeclared exception!
      try { 
        tree0.insert(nameLN0, byteArray0, true, (CursorImpl) null, lockResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Tree tree0 = new Tree();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      DBIN dBIN0 = new DBIN(databaseImpl0, byteArray0, 21, byteArray0, 2839);
      Tree.SearchType tree_SearchType0 = Tree.SearchType.RIGHT;
      BINBoundary bINBoundary0 = new BINBoundary();
      // Undeclared exception!
      try { 
        tree0.searchSubTree(dBIN0, byteArray0, tree_SearchType0, (-163L), bINBoundary0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // searchSubTree passed key and left/right search
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test058()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[3];
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      IN iN0 = tree0.searchSubTree((IN) null, byteArray0, tree_SearchType0, (byte)60, bINBoundary0, false);
      assertNull(iN0);
  }

  @Test
  public void test059()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[0];
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN(0);
      // Undeclared exception!
      try { 
        tree0.hook683(treeLocation0, byteArray0, treeLocation0.lnKey, dupCountLN0, true, true, true, true, true, true, dupCountLN0);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test060()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[0];
      try { 
        tree0.getParentBINForChildLN((TreeLocation) null, byteArray0, byteArray0, (LN) null, false, false, false, false);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // 
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test061()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN();
      boolean boolean0 = tree0.getParentBINForChildLN(treeLocation0, (byte[]) null, (byte[]) null, dupCountLN0, true, false, false, false);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.getParentINForChildIN((IN) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test063()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.getLastNode((DIN) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getLastNode passed null root
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test064()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      // Undeclared exception!
      try { 
        tree0.getFirstNode((DIN) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getFirstNode passed null root
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test065()  throws Throwable  {
      Tree tree0 = new Tree();
      long long0 = tree0.getRootLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test066()  throws Throwable  {
      Tree tree0 = new Tree();
      DatabaseId databaseId0 = new DatabaseId((int) (byte)2);
      NameLN nameLN0 = new NameLN(databaseId0);
      Tree.Tree_traceInsertDuplicate tree_Tree_traceInsertDuplicate0 = new Tree.Tree_traceInsertDuplicate(tree0, (Level) null, (EnvironmentImpl) null, (BIN) null, nameLN0, (byte)2, (byte)0);
      //  // Unstable assertion: assertEquals(264L, nameLN0.getNodeId());
      //  // Unstable assertion: assertEquals(264L, nameLN0.getLastId());
  }

  @Test
  public void test067()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)27, true);
      tree_Tree_searchSplitsAllowed0.hook719();
  }

  @Test
  public void test068()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[9];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, 4221L, true);
      tree_Tree_searchSplitsAllowed0.hook720();
  }

  @Test
  public void test069()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[2];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)0, true);
      tree_Tree_searchSplitsAllowed0.hook721();
  }

  @Test
  public void test070()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)4, false);
      tree_Tree_searchSplitsAllowed0.hook718();
  }

  @Test
  public void test071()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[3];
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      tree_Tree_forceSplit0.hook726();
  }

  @Test
  public void test072()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[5];
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      tree_Tree_forceSplit0.hook725();
      //  // Unstable assertion: assertEquals(256L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Tree tree0 = new Tree();
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      tree_Tree_forceSplit0.hook724();
  }

  @Test
  public void test074()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[2];
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN0, byteArray0);
      try { 
        tree_Tree_forceSplit0.execute();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test075()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[1];
      DupCountLN dupCountLN0 = new DupCountLN();
      ChildReference childReference0 = tree0.makeRootChildReference(dupCountLN0, byteArray0, (byte) (-103));
      childReference0.setTarget(dupCountLN0);
      //  // Unstable assertion: assertEquals(252L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(252L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test076()  throws Throwable  {
      Tree tree0 = new Tree();
      DupCountLN dupCountLN0 = new DupCountLN();
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        tree0.insert(dupCountLN0, byteArray0, false, (CursorImpl) null, (LockResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test077()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook681(dIN0);
      assertFalse(dIN0.isCompressible());
  }

  @Test
  public void test078()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook737((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test080()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook748();
      //  // Unstable assertion: assertEquals(249L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test081()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      tree0.hook731(treeLocation0);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test082()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook710(dIN0);
      assertEquals(1000, IN.ACCUMULATED_LIMIT);
  }

  @Test
  public void test083()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook709((DBIN) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test084()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook705(dIN0);
      assertEquals(1000, IN.ACCUMULATED_LIMIT);
  }

  @Test
  public void test085()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook751();
      //  // Unstable assertion: assertEquals(246L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test086()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook740(dIN0);
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test087()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[5];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-36), false);
      tree_Tree_searchSplitsAllowed0._this.hook661();
  }

  @Test
  public void test088()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.setSearchHook((TestHook) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test089()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook691((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test090()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      DBIN dBIN0 = new DBIN();
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        tree0.hook659(dupCountLN0, (-262), dBIN0, (-719L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test091()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook732();
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test092()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook752();
      //  // Unstable assertion: assertEquals(240L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test093()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook693((IN) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test094()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook741((BIN) null);
      //  // Unstable assertion: assertEquals(237L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test095()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook750((BIN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test096()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook712((BIN) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test097()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook682((IN) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test098()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[9];
      ArrayList<LN> arrayList0 = new ArrayList<LN>();
      tree0.searchDeletableSubTree(dBIN0, byteArray0, arrayList0);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test099()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      tree0.hook665(dBIN0);
      assertEquals("</dbin>", dBIN0.endTag());
  }

  @Test
  public void test100()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook662((IN) null, (byte)28, (-1L), (IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test101()  throws Throwable  {
      Tree tree0 = new Tree();
      ArrayList<LN> arrayList0 = new ArrayList<LN>();
      tree0.hook676(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test102()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook739((IN) null, dIN0);
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test103()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = null;
      try {
        tree0 = new Tree(databaseImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test104()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[0];
      NameLN nameLN0 = new NameLN();
      ChildReference childReference0 = new ChildReference((Node) nameLN0, byteArray0, 1000000L);
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, 363, byteArray0, childReference0, (-272));
      // Undeclared exception!
      try { 
        tree0.getLastNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test105()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook694((IN) null, (IN) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test106()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook743((CursorImpl) null);
      //  // Unstable assertion: assertEquals(179L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test107()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook747((DBIN) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test108()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook707(dIN0);
      assertFalse(dIN0.countAsObsoleteWhenLogged());
  }

  @Test
  public void test109()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook700((IN) null);
      //  // Unstable assertion: assertEquals(176L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test110()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook692((IN) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test111()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.getNextBin((BIN) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test112()  throws Throwable  {
      Tree tree0 = new Tree();
      long long0 = tree0.getTransactionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test113()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.dump();
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test114()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      tree0.hook735(dBIN0);
      assertEquals(0L, dBIN0.getTransactionId());
  }

  @Test
  public void test115()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook663(dIN0, dIN0, (-1L), (-1L));
      assertTrue(dIN0.containsDuplicates());
  }

  @Test
  public void test116()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook675(dIN0);
      assertEquals(0, dIN0.getNEntries());
  }

  @Test
  public void test117()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook699((IN) null);
      //  // Unstable assertion: assertEquals(173L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test118()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.setCkptHook((TestHook) null);
      //  // Unstable assertion: assertEquals(170L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test119()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.withRootLatchedShared((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test120()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook657((LN) null, (EnvironmentImpl) null, (BIN) null, (byte) (-81), 10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree$Tree_traceInsert", e);
      }
  }

  @Test
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Tree tree0 = new Tree();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      DBIN dBIN0 = new DBIN(databaseImpl0, byteArray0, 21, byteArray0, 2839);
      tree0.getPrevBin(dBIN0, false);
      //  // Unstable assertion: assertEquals(33L, dBIN0.getLastId());
      //  // Unstable assertion: assertEquals(32L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test122()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.validateDelete((byte)101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test123()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook749();
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test124()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      boolean boolean0 = tree0.logEntryIsTransactional();
      //  // Unstable assertion: assertEquals(28L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test125()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook745((CursorImpl) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test126()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.setTreeStatsAccumulator((TreeWalkerStatsAccumulator) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test127()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      // Undeclared exception!
      try { 
        tree0.withRootLatchedExclusive((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test128()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[5];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-42), false);
      tree_Tree_searchSplitsAllowed0._this.hook736((IN) null);
  }

  @Test
  public void test129()  throws Throwable  {
      Tree tree0 = new Tree();
      IN iN0 = tree0.getFirstNode();
      assertNull(iN0);
  }

  @Test
  public void test130()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook746((CursorImpl) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test131()  throws Throwable  {
      Tree tree0 = new Tree();
      DatabaseImpl databaseImpl0 = tree0.getDatabase();
      assertNull(databaseImpl0);
  }

  @Test
  public void test132()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeStats treeStats0 = tree0.getTreeStats();
      assertEquals(0, treeStats0.nRootSplits);
  }

  @Test
  public void test133()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.setWaitHook((TestHook) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test134()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook729();
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test135()  throws Throwable  {
      Tree tree0 = new Tree();
      IN iN0 = tree0.getLastNode();
      assertNull(iN0);
  }

  @Test
  public void test136()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook742((DBIN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test138()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook738((IN) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test139()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook753();
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test140()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook689((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test141()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook673();
      assertEquals(0L, tree0.getTransactionId());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:26:32 KST 2017
 */

package com.sleepycat.je;

import static org.junit.Assert.assertEquals;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class PreloadStats_ESTest7 extends PreloadStats_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.status = null;
      preloadStats0.getStatus();
      assertEquals(0, preloadStats0.nDINsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
  }

  @Test
  public void test01()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      assertEquals(0, preloadStats0.nLNsLoaded);
      
      preloadStats0.nLNsLoaded = 1;
      int int0 = preloadStats0.getNLNsLoaded();
      assertEquals(1, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      assertEquals(0, preloadStats0.nINsLoaded);
      
      preloadStats0.setNINsLoaded(1);
      int int0 = preloadStats0.getNINsLoaded();
      assertEquals(1, preloadStats0.nINsLoaded);
      assertEquals(1, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNDupCountLNsLoaded((-5329));
      int int0 = preloadStats0.getNDupCountLNsLoaded();
      assertEquals((-5329), preloadStats0.nDupCountLNsLoaded);
      assertEquals((-5329), int0);
  }

  @Test
  public void test04()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.nDBINsLoaded = (-969);
      int int0 = preloadStats0.getNDBINsLoaded();
      assertEquals((-969), int0);
  }

  @Test
  public void test05()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      assertEquals(0, preloadStats0.nDBINsLoaded);
      
      preloadStats0.nDBINsLoaded = 498;
      String string0 = preloadStats0.toString();
      assertEquals("status=PreloadStatus.SUCCESS\nnINsLoaded=0\nnBINsLoaded=0\nnLNsLoaded=0\nnDINsLoaded=0\nnDBINsLoaded=498\nnDupCountLNsLoaded=0\n", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNDupCountLNsLoaded((-1));
      preloadStats0.toString();
      assertEquals((-1), preloadStats0.nDupCountLNsLoaded);
  }

  @Test
  public void test07()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      assertEquals(0, preloadStats0.nLNsLoaded);
      
      preloadStats0.nLNsLoaded = 1169;
      String string0 = preloadStats0.toString();
      assertEquals("status=PreloadStatus.SUCCESS\nnINsLoaded=0\nnBINsLoaded=0\nnLNsLoaded=1169\nnDINsLoaded=0\nnDBINsLoaded=0\nnDupCountLNsLoaded=0\n", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      assertEquals(0, preloadStats0.nBINsLoaded);
      
      preloadStats0.nBINsLoaded = (-1);
      String string0 = preloadStats0.toString();
      assertEquals("status=PreloadStatus.SUCCESS\nnINsLoaded=0\nnBINsLoaded=-1\nnLNsLoaded=0\nnDINsLoaded=0\nnDBINsLoaded=0\nnDupCountLNsLoaded=0\n", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      assertEquals(0, preloadStats0.nINsLoaded);
      
      preloadStats0.nINsLoaded = 940;
      String string0 = preloadStats0.toString();
      assertEquals("status=PreloadStatus.SUCCESS\nnINsLoaded=940\nnBINsLoaded=0\nnLNsLoaded=0\nnDINsLoaded=0\nnDBINsLoaded=0\nnDupCountLNsLoaded=0\n", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      PreloadStatus preloadStatus0 = PreloadStatus.FILLED_CACHE;
      preloadStats0.setStatus(preloadStatus0);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
  }

  @Test
  public void test11()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNBINsLoaded(2166);
      int int0 = preloadStats0.getNBINsLoaded();
      assertEquals(2166, preloadStats0.nBINsLoaded);
      assertEquals(2166, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNLNsLoaded((-1));
      preloadStats0.setNINsLoaded(0);
      assertEquals((-1), preloadStats0.nLNsLoaded);
  }

  @Test
  public void test13()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNDupCountLNsLoaded(2166);
      int int0 = preloadStats0.getNDupCountLNsLoaded();
      assertEquals(2166, preloadStats0.nDupCountLNsLoaded);
      assertEquals(2166, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.nDBINsLoaded = 3221;
      int int0 = preloadStats0.getNDBINsLoaded();
      assertEquals(3221, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.nDINsLoaded = (-1);
      int int0 = preloadStats0.getNDINsLoaded();
      assertEquals((-1), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNLNsLoaded((-1));
      int int0 = preloadStats0.getNLNsLoaded();
      assertEquals((-1), preloadStats0.nLNsLoaded);
      assertEquals((-1), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.nBINsLoaded = (-848);
      int int0 = preloadStats0.getNBINsLoaded();
      assertEquals((-848), int0);
  }

  @Test
  public void test18()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.nINsLoaded = (-675);
      int int0 = preloadStats0.getNINsLoaded();
      assertEquals((-675), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      int int0 = preloadStats0.getNBINsLoaded();
      assertEquals(0, int0);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
  }

  @Test
  public void test20()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      int int0 = preloadStats0.getNLNsLoaded();
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, int0);
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
  }

  @Test
  public void test21()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNDBINsLoaded(241);
      assertEquals(241, preloadStats0.nDBINsLoaded);
  }

  @Test
  public void test22()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      int int0 = preloadStats0.getNDBINsLoaded();
      assertEquals(0, int0);
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
  }

  @Test
  public void test23()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.getStatus();
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
  }

  @Test
  public void test24()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      int int0 = preloadStats0.getNINsLoaded();
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, int0);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
  }

  @Test
  public void test25()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      int int0 = preloadStats0.getNDINsLoaded();
      assertEquals(0, int0);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, preloadStats0.nDupCountLNsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nBINsLoaded);
      assertEquals(0, preloadStats0.nINsLoaded);
  }

  @Test
  public void test26()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      int int0 = preloadStats0.getNDupCountLNsLoaded();
      assertEquals(0, preloadStats0.nINsLoaded);
      assertEquals(0, preloadStats0.nLNsLoaded);
      assertEquals(0, preloadStats0.nDINsLoaded);
      assertEquals(0, preloadStats0.nDBINsLoaded);
      assertEquals(0, int0);
      assertEquals(0, preloadStats0.nBINsLoaded);
  }

  @Test
  public void test27()  throws Throwable  {
      PreloadStats preloadStats0 = new PreloadStats();
      preloadStats0.setNDINsLoaded(2295);
      int int0 = preloadStats0.getNDINsLoaded();
      assertEquals(2295, preloadStats0.nDINsLoaded);
      assertEquals(2295, int0);
  }
}

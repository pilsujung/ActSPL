/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:01:16 KST 2017
 */

package com.sleepycat.je;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class BtreeStats_ESTest7 extends BtreeStats_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setMainTreeMaxDepth(781);
      int int0 = btreeStats0.getMainTreeMaxDepth();
      assertEquals(781, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setMainTreeMaxDepth((-1));
      int int0 = btreeStats0.getMainTreeMaxDepth();
      assertEquals((-1), int0);
  }

  @Test
  public void test02()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setLeafNodeCount(2095L);
      long long0 = btreeStats0.getLeafNodeCount();
      assertEquals(2095L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setLeafNodeCount((-2675L));
      long long0 = btreeStats0.getLeafNodeCount();
      assertEquals((-2675L), long0);
  }

  @Test
  public void test04()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setInternalNodeCount(1L);
      long long0 = btreeStats0.getInternalNodeCount();
      assertEquals(1L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setInternalNodeCount((-2964L));
      long long0 = btreeStats0.getInternalNodeCount();
      assertEquals((-2964L), long0);
  }

  @Test
  public void test06()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[3];
      btreeStats0.setINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getINsByLevel();
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test07()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateTreeMaxDepth(486);
      int int0 = btreeStats0.getDuplicateTreeMaxDepth();
      assertEquals(486, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateTreeMaxDepth((-1));
      int int0 = btreeStats0.getDuplicateTreeMaxDepth();
      assertEquals((-1), int0);
  }

  @Test
  public void test09()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateInternalNodeCount(1L);
      long long0 = btreeStats0.getDuplicateInternalNodeCount();
      assertEquals(1L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateInternalNodeCount((-1));
      long long0 = btreeStats0.getDuplicateInternalNodeCount();
      assertEquals((-1L), long0);
  }

  @Test
  public void test11()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateBottomInternalNodeCount(2891L);
      long long0 = btreeStats0.getDuplicateBottomInternalNodeCount();
      assertEquals(2891L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateBottomInternalNodeCount((-1880L));
      long long0 = btreeStats0.getDuplicateBottomInternalNodeCount();
      assertEquals((-1880L), long0);
  }

  @Test
  public void test13()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDupCountLeafNodeCount(1776L);
      long long0 = btreeStats0.getDupCountLeafNodeCount();
      assertEquals(1776L, long0);
  }

  @Test
  public void test14()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDupCountLeafNodeCount((-3227L));
      long long0 = btreeStats0.getDupCountLeafNodeCount();
      assertEquals((-3227L), long0);
  }

  @Test
  public void test15()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDeletedLeafNodeCount((-432L));
      long long0 = btreeStats0.getDeletedLeafNodeCount();
      assertEquals((-432L), long0);
  }

  @Test
  public void test16()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[9];
      btreeStats0.setDINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getDINsByLevel();
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test
  public void test17()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[9];
      btreeStats0.setDBINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getDBINsByLevel();
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[0];
      btreeStats0.setDBINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getDBINsByLevel();
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setBottomInternalNodeCount(897L);
      long long0 = btreeStats0.getBottomInternalNodeCount();
      assertEquals(897L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setBottomInternalNodeCount((-929L));
      long long0 = btreeStats0.getBottomInternalNodeCount();
      assertEquals((-929L), long0);
  }

  @Test
  public void test21()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[2];
      btreeStats0.setBINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getBINsByLevel();
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[0];
      btreeStats0.setBINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getBINsByLevel();
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test
  public void test23()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateBottomInternalNodeCount((-1L));
      String string0 = btreeStats0.toString();
      assertEquals("numLeafNodes=0\nnumDeletedLeafNodes=0\nnumDuplicateCountLeafNodes=0\nmainTreeMaxDepth=0\nduplicateTreeMaxDepth=0\n", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setInternalNodeCount((-2675L));
      String string0 = btreeStats0.toString();
      assertEquals("numLeafNodes=0\nnumDeletedLeafNodes=0\nnumDuplicateCountLeafNodes=0\nmainTreeMaxDepth=0\nduplicateTreeMaxDepth=0\n", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setBottomInternalNodeCount((-2157L));
      String string0 = btreeStats0.toString();
      assertEquals("numLeafNodes=0\nnumDeletedLeafNodes=0\nnumDuplicateCountLeafNodes=0\nmainTreeMaxDepth=0\nduplicateTreeMaxDepth=0\n", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateBottomInternalNodeCount(1055L);
      long[] longArray0 = new long[7];
      longArray0[5] = (-2396L);
      btreeStats0.setDBINsByLevel(longArray0);
      btreeStats0.toString();
      assertEquals(1055L, btreeStats0.getDuplicateBottomInternalNodeCount());
  }

  @Test
  public void test27()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateInternalNodeCount(1199L);
      // Undeclared exception!
      try { 
        btreeStats0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.BtreeStats", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateBottomInternalNodeCount(1055L);
      long[] longArray0 = new long[7];
      longArray0[0] = 1055L;
      btreeStats0.setDBINsByLevel(longArray0);
      btreeStats0.toString();
      assertEquals(1055L, btreeStats0.getDuplicateBottomInternalNodeCount());
  }

  @Test
  public void test29()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDuplicateInternalNodeCount((-1));
      String string0 = btreeStats0.toString();
      assertEquals("numLeafNodes=0\nnumDeletedLeafNodes=0\nnumDuplicateCountLeafNodes=0\nmainTreeMaxDepth=0\nduplicateTreeMaxDepth=0\n", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = btreeStats0.getDINsByLevel();
      assertNull(longArray0);
  }

  @Test
  public void test31()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getLeafNodeCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = btreeStats0.getBINsByLevel();
      assertNull(longArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setBottomInternalNodeCount(1L);
      // Undeclared exception!
      try { 
        btreeStats0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.BtreeStats", e);
      }
  }

  @Test
  public void test34()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getBottomInternalNodeCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test35()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getDeletedLeafNodeCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test36()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      int int0 = btreeStats0.getMainTreeMaxDepth();
      assertEquals(0, int0);
  }

  @Test
  public void test37()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      int int0 = btreeStats0.getDuplicateTreeMaxDepth();
      assertEquals(0, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = btreeStats0.getINsByLevel();
      assertNull(longArray0);
  }

  @Test
  public void test39()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getDupCountLeafNodeCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test40()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getDuplicateInternalNodeCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test41()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setDeletedLeafNodeCount(1L);
      long long0 = btreeStats0.getDeletedLeafNodeCount();
      assertEquals(1L, long0);
  }

  @Test
  public void test42()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = btreeStats0.getDBINsByLevel();
      assertNull(longArray0);
  }

  @Test
  public void test43()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      btreeStats0.setInternalNodeCount(1055L);
      // Undeclared exception!
      try { 
        btreeStats0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.BtreeStats", e);
      }
  }

  @Test
  public void test44()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getDuplicateBottomInternalNodeCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test45()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[0];
      btreeStats0.setDINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getDINsByLevel();
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test46()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long[] longArray0 = new long[0];
      btreeStats0.setINsByLevel(longArray0);
      long[] longArray1 = btreeStats0.getINsByLevel();
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test
  public void test47()  throws Throwable  {
      BtreeStats btreeStats0 = new BtreeStats();
      long long0 = btreeStats0.getInternalNodeCount();
      assertEquals(0L, long0);
  }
}

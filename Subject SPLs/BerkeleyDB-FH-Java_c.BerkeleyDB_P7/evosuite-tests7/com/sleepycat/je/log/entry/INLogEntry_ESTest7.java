/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:50:46 KST 2017
 */

package com.sleepycat.je.log.entry;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.IN;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class INLogEntry_ESTest7 extends INLogEntry_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      long long0 = iNLogEntry0.getObsoleteLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[12];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("pYowJ1Nvs@3<st0.f");
      iNLogEntry0.readEntry(byteBuffer0, (byte)12, (byte)12, false);
      long long0 = iNLogEntry0.getObsoleteLsn();
      assertEquals(4337881730738172234L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      long long0 = iNLogEntry0.getNodeId();
      assertEquals(0L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      Object object0 = iNLogEntry0.getMainItem();
      assertNull(object0);
  }

  @Test
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      long long0 = iNLogEntry0.getLsnOfIN(0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      long long0 = iNLogEntry0.getLsnOfIN(34L);
      assertEquals(34L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      IN iN0 = iNLogEntry0.getIN((EnvironmentImpl) null);
      assertNull(iN0);
  }

  @Test
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      DatabaseId databaseId0 = iNLogEntry0.getDbId();
      assertNull(databaseId0);
  }

  @Test
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("HE<kws.o");
      // Undeclared exception!
      try { 
        iNLogEntry0.readEntry(byteBuffer0, 109, (byte)2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)3, byteArray0, (ChildReference) null, (int) (byte)0);
      INLogEntry iNLogEntry0 = new INLogEntry((IN) dIN0);
      StringWriter stringWriter0 = new StringWriter((int) (byte)0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = iNLogEntry0.dumpEntry(stringBuffer0, false);
      //  // Unstable assertion: assertEquals("<din><node>246</node><key v=\"0 0 \"/><isRoot val=\"false\"/><level val=\"0\"/><entries numEntries=\"0\" length=\"3\" baseFileNumber=\"-1\"></entries><key v=\"0 0 \"/></din><dbId id=\"0\"/>", stringBuffer1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        iNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Class<IN> class0 = IN.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      // Undeclared exception!
      try { 
        iNLogEntry0.readEntry((ByteBuffer) null, 1606, (byte) (-1), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("#C@u _Bc/n2H+4");
      // Undeclared exception!
      try { 
        iNLogEntry0.readEntry(byteBuffer0, 1470, (byte)0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      // Undeclared exception!
      try { 
        iNLogEntry0.marshallOutsideWriteLatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      // Undeclared exception!
      try { 
        iNLogEntry0.getLogType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Class<IN> class0 = IN.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      // Undeclared exception!
      try { 
        iNLogEntry0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DIN dIN0 = new DIN();
      INLogEntry iNLogEntry0 = null;
      try {
        iNLogEntry0 = new INLogEntry((IN) dIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte)0);
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("pYowJ1Nvs@3<st0.f");
      iNLogEntry0.readEntry(byteBuffer0, (byte)12, (byte)0, false);
      //  // Unstable assertion: assertEquals(12, byteBuffer0.position());
      //  // Unstable assertion: assertEquals(169L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        iNLogEntry0.readEntry(byteBuffer0, 2052, (byte)1, false);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      try { 
        iNLogEntry0.readEntry((ByteBuffer) null, (-124), (byte)99, true);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // java.lang.InstantiationException: java.lang.Integer
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("pYowJ1Nvs@3<st0.f");
      iNLogEntry0.readEntry(byteBuffer0, (byte)12, (byte)32, false);
      iNLogEntry0.getDbId();
      assertEquals(4337881730738172234L, iNLogEntry0.getObsoleteLsn());
  }

  @Test
  public void test21()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      boolean boolean0 = iNLogEntry0.countAsObsoleteWhenLogged();
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      StringWriter stringWriter0 = new StringWriter((int) (byte)0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        iNLogEntry0.dumpEntry(stringBuffer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      LogEntryType logEntryType0 = iNLogEntry0.getLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test24()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("X^m><");
      // Undeclared exception!
      try { 
        iNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      boolean boolean0 = iNLogEntry0.marshallOutsideWriteLatch();
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      DatabaseId databaseId0 = iNLogEntry0.getDbId();
      assertEquals("0", databaseId0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      boolean boolean0 = iNLogEntry0.isTransactional();
      assertFalse(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      int int0 = iNLogEntry0.getLogSize();
      assertEquals(44, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[12];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      long long0 = iNLogEntry0.getObsoleteLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test30()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[6];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      long long0 = iNLogEntry0.getNodeId();
      //  // Unstable assertion: assertEquals(14L, long0);
  }

  @Test
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      long long0 = iNLogEntry0.getLsnOfIN((-105L));
      assertEquals((-105L), long0);
  }

  @Test
  public void test32()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      INLogEntry iNLogEntry1 = (INLogEntry)iNLogEntry0.clone();
      assertEquals((-1L), iNLogEntry1.getObsoleteLsn());
  }

  @Test
  public void test33()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      BIN bIN1 = (BIN)iNLogEntry0.getIN((EnvironmentImpl) null);
      assertFalse(bIN1.isRoot());
  }

  @Test
  public void test34()  throws Throwable  {
      Class<String> class0 = String.class;
      INLogEntry iNLogEntry0 = new INLogEntry(class0);
      iNLogEntry0.postLogWork((-792L));
      assertFalse(iNLogEntry0.countAsObsoleteWhenLogged());
  }

  @Test
  public void test35()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[12];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      long long0 = iNLogEntry0.getTransactionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test36()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 972, (int) (byte) (-72));
      INLogEntry iNLogEntry0 = new INLogEntry((IN) bIN0);
      BIN bIN1 = (BIN)iNLogEntry0.getMainItem();
      assertEquals("<bin>", bIN1.beginTag());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 13:51:37 KST 2017
 */

package com.sleepycat.je;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sleepycat.bind.tuple.TupleTupleMarshalledBinding;
import com.sleepycat.bind.tuple.TupleTupleMarshalledKeyCreator;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.ForeignKeyDeleteAction;
import com.sleepycat.je.ForeignMultiKeyNullifier;
import com.sleepycat.je.SecondaryConfig;
import com.sleepycat.je.SecondaryKeyCreator;
import com.sleepycat.je.SecondaryMultiKeyCreator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class SecondaryConfig_ESTest4 extends SecondaryConfig_ESTest_scaffolding4 {


  @Test
  public void test01()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      secondaryConfig0.setAllowPopulate(true);
      boolean boolean0 = secondaryConfig0.getAllowPopulate();
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, true, false, true, false, true, false, true);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryMultiKeyCreator\n ForeignKeyDeleteAction\n", string0);
  }


  @Test
  public void test04()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      TupleTupleMarshalledKeyCreator tupleTupleMarshalledKeyCreator0 = (TupleTupleMarshalledKeyCreator)secondaryConfig0.getForeignKeyNullifier();
      assertNull(tupleTupleMarshalledKeyCreator0);
  }



  @Test
  public void test07()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      Database database0 = secondaryConfig0.DEFAULT.getForeignKeyDatabase();
      assertNull(database0);
  }

  @Test
  public void test08()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      boolean boolean0 = secondaryConfig0.getImmutableSecondaryKey();
      assertFalse(boolean0);
  }


  @Test
  public void test10()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, false, false, false, false, false, false, false);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryKeyCreator\n SecondaryMultiKeyCreator\n ForeignKeyDelete\n ForeignKeyDeleteAction\n ForeignKeyNullifier\n ForeignMultiKeyNullifier\n ImmutableSecondaryKey\n", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, false, false, true, true, false, true, true);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryKeyCreator\n SecondaryMultiKeyCreator\n ForeignKeyNullifier\n ForeignMultiKeyNullifier\n", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      SecondaryConfig secondaryConfig1 = new SecondaryConfig();
      TupleTupleMarshalledKeyCreator tupleTupleMarshalledKeyCreator0 = new TupleTupleMarshalledKeyCreator((TupleTupleMarshalledBinding) null, " ImmutableSecondaryKey\n");
      secondaryConfig1.setForeignKeyNullifier(tupleTupleMarshalledKeyCreator0);
      try { 
        secondaryConfig0.validate(secondaryConfig1);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // The following SecondaryConfig parameters for the
         // cached Database do not match the parameters for the
         // requested Database:
         //  ForeignKeyNullifier
         //  ForeignMultiKeyNullifier
         //
         assertThrownBy("com.sleepycat.je.SecondaryConfig", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      ForeignKeyDeleteAction foreignKeyDeleteAction0 = ForeignKeyDeleteAction.NULLIFY;
      secondaryConfig0.setForeignKeyDeleteAction(foreignKeyDeleteAction0);
      SecondaryConfig secondaryConfig1 = SecondaryConfig.DEFAULT;
      try { 
        secondaryConfig0.validate(secondaryConfig1);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // The following SecondaryConfig parameters for the
         // cached Database do not match the parameters for the
         // requested Database:
         //  ForeignKeyDeleteAction
         //
         assertThrownBy("com.sleepycat.je.SecondaryConfig", e);
      }
  }


  @Test
  public void test15()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      secondaryConfig0.setForeignKeyDatabase((Database) null);
      assertFalse(secondaryConfig0.getOverrideBtreeComparator());
  }

  @Test
  public void test17()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      secondaryConfig0.setMultiKeyCreator((SecondaryMultiKeyCreator) null);
      assertFalse(secondaryConfig0.getTransactional());
  }


  @Test
  public void test19()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      secondaryConfig0.DEFAULT.setKeyCreator((SecondaryKeyCreator) null);
      assertFalse(secondaryConfig0.getExclusiveCreate());
  }

  @Test
  public void test20()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      secondaryConfig0.validate(secondaryConfig0);
      assertFalse(secondaryConfig0.getExclusiveCreate());
  }

}

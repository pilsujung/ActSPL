/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 01:32:19 KST 2017
 */

package com.sleepycat.je.recovery;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.nio.ByteBuffer;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.LogEntryType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class CheckpointEnd_ESTest6 extends CheckpointEnd_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("</", 803L, 803L, 803L, 803L, (-1), 0L, (long) (-1));
      long long0 = checkpointEnd0.getRootLsn();
      assertEquals(803L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getRootLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getLastTxnId();
      assertEquals(0L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("</din>", (-1594L), (-1594L), (-917L), (-1594L), 0, (-388L), (-917L));
      long long0 = checkpointEnd0.getLastTxnId();
      assertEquals((-388L), long0);
  }

  @Test
  public void test04()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getLastNodeId();
      assertEquals(0L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("</", 803L, 803L, 803L, 803L, (-1), 0L, (long) (-1));
      long long0 = checkpointEnd0.getLastNodeId();
      assertEquals(803L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      int int0 = checkpointEnd0.getLastDbId();
      assertEquals(0, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", 0L, 0L, (-4625L), 0L, 1215, 0L, 0L);
      int int0 = checkpointEnd0.getLastDbId();
      assertEquals(1215, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getId();
      assertEquals(0L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("</ckptStart>", 0L, 0L, 0L, 0L, 4977, 177L, 432L);
      long long0 = checkpointEnd0.getId();
      assertEquals(432L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("=2iDX:", 54L, 54L, 54L, (-1L), 0, (long) 0, (-2172L));
      long long0 = checkpointEnd0.getFirstActiveLsn();
      assertEquals(54L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getFirstActiveLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test12()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("%jKv%NU#", 0L, 0L, 0L, 0L, (-9), 0L, (long) (-9));
      long long0 = checkpointEnd0.getCheckpointStartLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("*r}`G%1a-X{.M{@m", (-1L), (-1L), (-1L), (-1L), 10, (long) 10, 1228L);
      long long0 = checkpointEnd0.getCheckpointStartLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test14()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", 0L, 0L, (-1L), 0L, (-277), 0L, 0L);
      // Undeclared exception!
      try { 
        checkpointEnd0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd(" lastTxnId=", 1700L, 1700L, 0L, 0L, (-1001), 84L, 84L);
      // Undeclared exception!
      try { 
        checkpointEnd0.readFromLog((ByteBuffer) null, (byte) (-24));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      // Undeclared exception!
      try { 
        checkpointEnd0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-1L), (-1L), (-1L), (-1179L), 1, (-1179L), 69L);
      // Undeclared exception!
      try { 
        checkpointEnd0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.recovery.CheckpointEnd", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("=2iDX:", 54L, 54L, 54L, (-1L), 0, (long) 0, (-2172L));
      String string0 = checkpointEnd0.toString();
      //  // Unstable assertion: assertEquals("time=2017-04-22 01:31:57.405 lastNodeId=-1 lastDbId=0 lastTxnId=0 id=-2172 rootExists=true ckptStartLsn=0x0/0x36 root=0x0/0x36 firstActive=0x0/0x36", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-1L), (-1L), (-1L), (-1179L), 1, (-1179L), 69L);
      String string0 = checkpointEnd0.toString();
      //  // Unstable assertion: assertEquals("time=2017-04-22 01:31:56.569 lastNodeId=-1179 lastDbId=1 lastTxnId=-1179 id=69 rootExists=false ckptStartLsn=0xffffffff/0xffffffff firstActive=0xffffffff/0xffffffff", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("=2iDX:", 54L, 54L, 54L, (-1L), 0, (long) 0, (-2172L));
      int int0 = checkpointEnd0.getLogSize();
      assertEquals(71, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("*r}`G%1a-X{.M{@m", (-1L), (-1L), (-1L), (-1L), 10, (long) 10, 1228L);
      int int0 = checkpointEnd0.getLogSize();
      assertEquals(73, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("jD", 0L, (-1L), (-1L), (-2109L), (-279), 0L, 0L);
      assertTrue(checkpointEnd0.marshallOutsideWriteLatch());
  }

  @Test
  public void test23()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd(" lastTxnId=", 1700L, 1700L, 0L, 0L, (-1001), 84L, 84L);
      int int0 = checkpointEnd0.getLastDbId();
      assertEquals((-1001), int0);
  }

  @Test
  public void test24()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", 0L, 0L, (-4625L), 0L, 1215, 0L, 0L);
      boolean boolean0 = checkpointEnd0.logEntryIsTransactional();
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("s*Q.(", 0L, (-1971L), (-4504L), (-1971L), 1680, 2360L, 1L);
      long long0 = checkpointEnd0.getLastTxnId();
      assertEquals(2360L, long0);
  }

  @Test
  public void test26()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("jLQtLbA34", 985L, 0L, 0L, 0L, 757, 985L, 0L);
      long long0 = checkpointEnd0.getCheckpointStartLsn();
      assertEquals(985L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("=2iDX:", 54L, 54L, 54L, (-1L), 0, (long) 0, (-2172L));
      long long0 = checkpointEnd0.getTransactionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test28()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd(">GSi\"E.X'9)", 255L, 0L, 255L, (-2458L), (-1), 3L, 4294967295L);
      long long0 = checkpointEnd0.getRootLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test29()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd((String) null, 127L, 127L, 127L, (-2010L), 23, 127L, (-2010L));
      long long0 = checkpointEnd0.getId();
      assertEquals((-2010L), long0);
  }

  @Test
  public void test30()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("=2iDX:", 54L, 54L, 54L, (-1L), 0, (long) 0, (-2172L));
      LogEntryType logEntryType0 = checkpointEnd0.getLogType();
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test31()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd(">4{03}dk0Q", 0L, 0L, 0L, 0L, (-2143037511), 0L, 0L);
      long long0 = checkpointEnd0.getFirstActiveLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      boolean boolean0 = checkpointEnd0.marshallOutsideWriteLatch();
      assertTrue(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      boolean boolean0 = checkpointEnd0.countAsObsoleteWhenLogged();
      assertFalse(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      checkpointEnd0.postLogWork(9L);
      assertEquals(0L, checkpointEnd0.getTransactionId());
  }

  @Test
  public void test35()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd((String) null, 624L, (-1478L), (-1478L), (-499L), 0, 427L, 427L);
      long long0 = checkpointEnd0.getLastNodeId();
      assertEquals((-499L), long0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 23:23:15 KST 2017
 */

package com.sleepycat.je;

import static org.junit.Assert.assertEquals;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class EnvironmentStats_ESTest6 extends EnvironmentStats_ESTest_scaffolding6 {

  @Test
  public void test000()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setSplitBins(812);
      int int0 = environmentStats0.getSplitBins();
      assertEquals(812, int0);
  }

  @Test
  public void test001()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setSplitBins((-2449));
      int int0 = environmentStats0.getSplitBins();
      assertEquals((-2449), int0);
  }

  @Test
  public void test002()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setRequiredEvictBytes(869L);
      long long0 = environmentStats0.getRequiredEvictBytes();
      assertEquals(869L, long0);
  }

  @Test
  public void test003()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      
      environmentStats0.setRequiredEvictBytes((-1L));
      long long0 = environmentStats0.getRequiredEvictBytes();
      assertEquals((-1L), long0);
  }

  @Test
  public void test004()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setProcessedBins(141);
      int int0 = environmentStats0.getProcessedBins();
      assertEquals(141, int0);
  }

  @Test
  public void test005()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setProcessedBins((-754));
      int int0 = environmentStats0.getProcessedBins();
      assertEquals((-754), int0);
  }

  @Test
  public void test006()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNonEmptyBins(2650);
      int int0 = environmentStats0.getNonEmptyBins();
      assertEquals(2650, int0);
  }

  @Test
  public void test007()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNonEmptyBins((-1935));
      int int0 = environmentStats0.getNonEmptyBins();
      assertEquals((-1935), int0);
  }

  @Test
  public void test008()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNToBeCleanedLNsProcessed(958);
      int int0 = environmentStats0.getNToBeCleanedLNsProcessed();
      assertEquals(958, int0);
  }

  @Test
  public void test009()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNToBeCleanedLNsProcessed((-2195));
      int int0 = environmentStats0.getNToBeCleanedLNsProcessed();
      assertEquals((-2195), int0);
  }

  @Test
  public void test010()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNTempBufferWrites(812);
      long long0 = environmentStats0.getNTempBufferWrites();
      assertEquals(812L, long0);
  }

  @Test
  public void test011()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNTempBufferWrites((-897L));
      long long0 = environmentStats0.getNTempBufferWrites();
      assertEquals((-897L), long0);
  }

  @Test
  public void test012()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatIteratorReads(1L);
      long long0 = environmentStats0.getNRepeatIteratorReads();
      assertEquals(1L, long0);
  }

  @Test
  public void test013()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatIteratorReads((-1066L));
      long long0 = environmentStats0.getNRepeatIteratorReads();
      assertEquals((-1066L), long0);
  }

  @Test
  public void test014()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatFaultReads(4294967295L);
      long long0 = environmentStats0.getNRepeatFaultReads();
      assertEquals(4294967295L, long0);
  }

  @Test
  public void test015()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatFaultReads((-1L));
      long long0 = environmentStats0.getNRepeatFaultReads();
      assertEquals((-1L), long0);
  }

  @Test
  public void test016()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsProcessed(3782);
      int int0 = environmentStats0.getNPendingLNsProcessed();
      assertEquals(3782, int0);
  }

  @Test
  public void test017()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsProcessed((-2493));
      int int0 = environmentStats0.getNPendingLNsProcessed();
      assertEquals((-2493), int0);
  }

  @Test
  public void test018()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsLocked(4237);
      int int0 = environmentStats0.getNPendingLNsLocked();
      assertEquals(4237, int0);
  }

  @Test
  public void test019()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsLocked((-2127));
      int int0 = environmentStats0.getNPendingLNsLocked();
      assertEquals((-2127), int0);
  }

  @Test
  public void test020()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNotResident(1L);
      long long0 = environmentStats0.getNNotResident();
      assertEquals(1L, long0);
  }

  @Test
  public void test021()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNotResident((-1116));
      long long0 = environmentStats0.getNNotResident();
      assertEquals((-1116L), long0);
  }

  @Test
  public void test022()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesSelected(1170L);
      long long0 = environmentStats0.getNNodesSelected();
      assertEquals(1170L, long0);
  }

  @Test
  public void test023()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesSelected((-1838L));
      long long0 = environmentStats0.getNNodesSelected();
      assertEquals((-1838L), long0);
  }

  @Test
  public void test024()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesScanned(434L);
      long long0 = environmentStats0.getNNodesScanned();
      assertEquals(434L, long0);
  }

  @Test
  public void test025()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesScanned((-86));
      long long0 = environmentStats0.getNNodesScanned();
      assertEquals((-86L), long0);
  }

  @Test
  public void test026()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesExplicitlyEvicted(309L);
      long long0 = environmentStats0.getNNodesExplicitlyEvicted();
      assertEquals(309L, long0);
  }

  @Test
  public void test027()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesExplicitlyEvicted((-1712));
      long long0 = environmentStats0.getNNodesExplicitlyEvicted();
      assertEquals((-1712L), long0);
  }

  @Test
  public void test028()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNMarkedLNsProcessed(1);
      int int0 = environmentStats0.getNMarkedLNsProcessed();
      assertEquals(1, int0);
  }

  @Test
  public void test029()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNMarkedLNsProcessed((-2926));
      int int0 = environmentStats0.getNMarkedLNsProcessed();
      assertEquals((-2926), int0);
  }

  @Test
  public void test030()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLogBuffers(2672);
      int int0 = environmentStats0.getNLogBuffers();
      assertEquals(2672, int0);
  }

  @Test
  public void test031()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLogBuffers((-68));
      int int0 = environmentStats0.getNLogBuffers();
      assertEquals((-68), int0);
  }

  @Test
  public void test032()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsObsolete(1);
      int int0 = environmentStats0.getNLNsObsolete();
      assertEquals(1, int0);
  }

  @Test
  public void test033()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsObsolete((-2743));
      int int0 = environmentStats0.getNLNsObsolete();
      assertEquals((-2743), int0);
  }

  @Test
  public void test034()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMigrated(1656);
      int int0 = environmentStats0.getNLNsMigrated();
      assertEquals(1656, int0);
  }

  @Test
  public void test035()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMigrated((-2865));
      int int0 = environmentStats0.getNLNsMigrated();
      assertEquals((-2865), int0);
  }

  @Test
  public void test036()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMarked(734);
      int int0 = environmentStats0.getNLNsMarked();
      assertEquals(734, int0);
  }

  @Test
  public void test037()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMarked((-957));
      int int0 = environmentStats0.getNLNsMarked();
      assertEquals((-957), int0);
  }

  @Test
  public void test038()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsLocked(1401);
      int int0 = environmentStats0.getNLNsLocked();
      assertEquals(1401, int0);
  }

  @Test
  public void test039()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsLocked((-1211));
      int int0 = environmentStats0.getNLNsLocked();
      assertEquals((-1211), int0);
  }

  @Test
  public void test040()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsDead(10);
      int int0 = environmentStats0.getNLNsDead();
      assertEquals(10, int0);
  }

  @Test
  public void test041()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsDead((-2429));
      int int0 = environmentStats0.getNLNsDead();
      assertEquals((-2429), int0);
  }

  @Test
  public void test042()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsCleaned(10);
      int int0 = environmentStats0.getNLNsCleaned();
      assertEquals(10, int0);
  }

  @Test
  public void test043()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsCleaned((-2334));
      int int0 = environmentStats0.getNLNsCleaned();
      assertEquals((-2334), int0);
  }

  @Test
  public void test044()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNQueueHits(435);
      int int0 = environmentStats0.getNLNQueueHits();
      assertEquals(435, int0);
  }

  @Test
  public void test045()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsObsolete(550);
      int int0 = environmentStats0.getNINsObsolete();
      assertEquals(550, int0);
  }

  @Test
  public void test046()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsObsolete((-1726));
      int int0 = environmentStats0.getNINsObsolete();
      assertEquals((-1726), int0);
  }

  @Test
  public void test047()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsMigrated(2386);
      int int0 = environmentStats0.getNINsMigrated();
      assertEquals(2386, int0);
  }

  @Test
  public void test048()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsMigrated((-651));
      int int0 = environmentStats0.getNINsMigrated();
      assertEquals((-651), int0);
  }

  @Test
  public void test049()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsDead(933);
      int int0 = environmentStats0.getNINsDead();
      assertEquals(933, int0);
  }

  @Test
  public void test050()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsDead((-4081));
      int int0 = environmentStats0.getNINsDead();
      assertEquals((-4081), int0);
  }

  @Test
  public void test051()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsCleaned(2183);
      int int0 = environmentStats0.getNINsCleaned();
      assertEquals(2183, int0);
  }

  @Test
  public void test052()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsCleaned((-3322));
      int int0 = environmentStats0.getNINsCleaned();
      assertEquals((-3322), int0);
  }

  @Test
  public void test053()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullINFlush(352);
      int int0 = environmentStats0.getNFullINFlush();
      assertEquals(352, int0);
  }

  @Test
  public void test054()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullINFlush((-1285));
      int int0 = environmentStats0.getNFullINFlush();
      assertEquals((-1285), int0);
  }

  @Test
  public void test055()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullBINFlush(2397);
      int int0 = environmentStats0.getNFullBINFlush();
      assertEquals(2397, int0);
  }

  @Test
  public void test056()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullBINFlush((-1483));
      int int0 = environmentStats0.getNFullBINFlush();
      assertEquals((-1483), int0);
  }

  @Test
  public void test057()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNEvictPasses(2154);
      int int0 = environmentStats0.getNEvictPasses();
      assertEquals(2154, int0);
  }

  @Test
  public void test058()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNEvictPasses((-62));
      int int0 = environmentStats0.getNEvictPasses();
      assertEquals((-62), int0);
  }

  @Test
  public void test059()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      
      environmentStats0.setNDeltaINFlush(1);
      int int0 = environmentStats0.getNDeltaINFlush();
      assertEquals(1, int0);
  }

  @Test
  public void test060()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNDeltaINFlush((-1));
      int int0 = environmentStats0.getNDeltaINFlush();
      assertEquals((-1), int0);
  }

  @Test
  public void test061()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNClusterLNsProcessed(4855);
      int int0 = environmentStats0.getNClusterLNsProcessed();
      assertEquals(4855, int0);
  }

  @Test
  public void test062()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNClusterLNsProcessed((-296));
      int int0 = environmentStats0.getNClusterLNsProcessed();
      assertEquals((-296), int0);
  }

  @Test
  public void test063()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerRuns(812);
      int int0 = environmentStats0.getNCleanerRuns();
      assertEquals(812, int0);
  }

  @Test
  public void test064()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerRuns((-1));
      int int0 = environmentStats0.getNCleanerRuns();
      assertEquals((-1), int0);
  }

  @Test
  public void test065()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerEntriesRead(45);
      int int0 = environmentStats0.getNCleanerEntriesRead();
      assertEquals(45, int0);
  }

  @Test
  public void test066()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerEntriesRead((-3383));
      int int0 = environmentStats0.getNCleanerEntriesRead();
      assertEquals((-3383), int0);
  }

  @Test
  public void test067()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerDeletions(674);
      int int0 = environmentStats0.getNCleanerDeletions();
      assertEquals(674, int0);
  }

  @Test
  public void test068()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerDeletions((-1));
      int int0 = environmentStats0.getNCleanerDeletions();
      assertEquals((-1), int0);
  }

  @Test
  public void test069()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCheckpoints(15);
      int int0 = environmentStats0.getNCheckpoints();
      assertEquals(15, int0);
  }

  @Test
  public void test070()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCheckpoints((-1));
      int int0 = environmentStats0.getNCheckpoints();
      assertEquals((-1), int0);
  }

  @Test
  public void test071()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCacheMiss((-931L));
      long long0 = environmentStats0.getNCacheMiss();
      assertEquals((-931L), long0);
  }

  @Test
  public void test072()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNBINsStripped(17L);
      long long0 = environmentStats0.getNBINsStripped();
      assertEquals(17L, long0);
  }

  @Test
  public void test073()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNBINsStripped((-421L));
      long long0 = environmentStats0.getNBINsStripped();
      assertEquals((-421L), long0);
  }

  @Test
  public void test074()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      
      environmentStats0.setLastCheckpointStart(0L);
      environmentStats0.getLastCheckpointStart();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
  }

  @Test
  public void test075()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setLastCheckpointStart(1978L);
      long long0 = environmentStats0.getLastCheckpointStart();
      assertEquals(1978L, long0);
  }

  @Test
  public void test076()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setLastCheckpointId(1517L);
      long long0 = environmentStats0.getLastCheckpointId();
      assertEquals(1517L, long0);
  }

  @Test
  public void test077()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setLastCheckpointId((-1512L));
      long long0 = environmentStats0.getLastCheckpointId();
      assertEquals((-1512L), long0);
  }

  @Test
  public void test078()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      
      environmentStats0.setLastCheckpointEnd(0L);
      environmentStats0.getLastCheckpointEnd();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
  }

  @Test
  public void test079()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      
      environmentStats0.setLastCheckpointEnd(1L);
      long long0 = environmentStats0.getLastCheckpointEnd();
      assertEquals(1L, long0);
  }

  @Test
  public void test080()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0, environmentStats0.getInCompQueueSize());
      
      environmentStats0.setInCompQueueSize(1);
      int int0 = environmentStats0.getInCompQueueSize();
      assertEquals(1, int0);
  }

  @Test
  public void test081()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setDbClosedBins(454);
      int int0 = environmentStats0.getDbClosedBins();
      assertEquals(454, int0);
  }

  @Test
  public void test082()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setDbClosedBins((-1));
      int int0 = environmentStats0.getDbClosedBins();
      assertEquals((-1), int0);
  }

  @Test
  public void test083()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCursorsBins(156);
      int int0 = environmentStats0.getCursorsBins();
      assertEquals(156, int0);
  }

  @Test
  public void test084()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCursorsBins((-145));
      int int0 = environmentStats0.getCursorsBins();
      assertEquals((-145), int0);
  }

  @Test
  public void test085()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0, environmentStats0.getCleanerBacklog());
      
      environmentStats0.setCleanerBacklog(1);
      int int0 = environmentStats0.getCleanerBacklog();
      assertEquals(1, int0);
  }

  @Test
  public void test086()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCleanerBacklog((-4279));
      int int0 = environmentStats0.getCleanerBacklog();
      assertEquals((-4279), int0);
  }

  @Test
  public void test087()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes(1213L);
      long long0 = environmentStats0.getCacheTotalBytes();
      assertEquals(1213L, environmentStats0.getBufferBytes());
      assertEquals(1213L, long0);
  }

  @Test
  public void test088()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes((-2586L));
      long long0 = environmentStats0.getCacheTotalBytes();
      assertEquals((-2586L), environmentStats0.getBufferBytes());
      assertEquals((-2586L), long0);
  }

  @Test
  public void test089()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCacheDataBytes(812);
      long long0 = environmentStats0.getCacheDataBytes();
      assertEquals(812L, long0);
  }

  @Test
  public void test090()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCacheDataBytes((-1L));
      long long0 = environmentStats0.getCacheDataBytes();
      assertEquals((-1L), environmentStats0.getCacheTotalBytes());
      assertEquals((-1L), long0);
  }

  @Test
  public void test091()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes(1518L);
      long long0 = environmentStats0.getBufferBytes();
      assertEquals(1518L, long0);
  }

  @Test
  public void test092()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes((-647L));
      long long0 = environmentStats0.getBufferBytes();
      assertEquals((-647L), environmentStats0.getCacheTotalBytes());
      assertEquals((-647L), long0);
  }

  @Test
  public void test093()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes((-2586L));
      environmentStats0.toString();
      assertEquals((-2586L), environmentStats0.getCacheTotalBytes());
  }

  @Test
  public void test094()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.hook61((StringBuffer) null);
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
  }

  @Test
  public void test095()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.hook60();
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
  }

  @Test
  public void test096()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getCacheTotalBytes();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test097()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNQueueHits();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
  }

  @Test
  public void test098()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getProcessedBins();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test099()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNNodesExplicitlyEvicted();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test100()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNClusterLNsProcessed();
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
  }

  @Test
  public void test101()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNNodesScanned();
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
  }

  @Test
  public void test102()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsLocked();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test103()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCheckpoints();
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test104()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getBufferBytes();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test105()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsMarked();
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
  }

  @Test
  public void test106()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsObsolete();
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test107()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setInCompQueueSize((-3762));
      int int0 = environmentStats0.getInCompQueueSize();
      assertEquals((-3762), int0);
  }

  @Test
  public void test108()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsDead();
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test109()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsMigrated();
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
  }

  @Test
  public void test110()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getRequiredEvictBytes();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test111()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNRepeatIteratorReads();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test112()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getInCompQueueSize();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }

  @Test
  public void test113()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNEvictPasses();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test114()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNPendingLNsLocked();
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
  }

  @Test
  public void test115()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNFullBINFlush();
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
  }

  @Test
  public void test116()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getSplitBins();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test117()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsMigrated();
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
  }

  @Test
  public void test118()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNNodesSelected();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, long0);
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test119()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNFullINFlush();
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
  }

  @Test
  public void test120()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCacheMiss(3666L);
      long long0 = environmentStats0.getNCacheMiss();
      assertEquals(3666L, long0);
  }

  @Test
  public void test121()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNNotResident();
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test122()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNToBeCleanedLNsProcessed();
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, int0);
  }

  @Test
  public void test123()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getCleanerBacklog();
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test124()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNMarkedLNsProcessed();
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test125()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsObsolete();
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
  }

  @Test
  public void test126()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLogBuffers();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test127()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNPendingLNsProcessed();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test128()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNonEmptyBins();
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
  }

  @Test
  public void test129()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNTempBufferWrites();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test130()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNBINsStripped();
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, long0);
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
  }

  @Test
  public void test131()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getCursorsBins();
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
  }

  @Test
  public void test132()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNRepeatFaultReads();
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
  }

  @Test
  public void test133()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsDead();
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
  }

  @Test
  public void test134()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getDbClosedBins();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getProcessedBins());
  }

  @Test
  public void test135()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCleanerDeletions();
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
  }

  @Test
  public void test136()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsCleaned();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
  }

  @Test
  public void test137()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getLastCheckpointEnd();
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), long0);
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test138()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNDeltaINFlush();
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
  }

  @Test
  public void test139()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsCleaned();
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNEvictPasses());
  }

  @Test
  public void test140()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getCacheDataBytes();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test141()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCleanerRuns();
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }

  @Test
  public void test142()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getLastCheckpointStart();
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals((-1L), long0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
  }

  @Test
  public void test143()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCleanerEntriesRead();
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test144()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNCacheMiss();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
  }

  @Test
  public void test145()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getLastCheckpointId();
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, long0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
  }

  @Test
  public void test146()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNQueueHits((-83));
      int int0 = environmentStats0.getNLNQueueHits();
      assertEquals((-83), int0);
  }
}

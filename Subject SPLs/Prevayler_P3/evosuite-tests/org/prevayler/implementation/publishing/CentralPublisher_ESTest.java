/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 22 05:35:11 GMT 2022
 */

package org.prevayler.implementation.publishing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.prevayler.implementation.Capsule;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.publishing.POBox;
import org.prevayler.implementation.publishing.TransactionSubscriber;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CentralPublisher_ESTest extends CentralPublisher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher(machineClock0, transientJournal0);
      TransactionSubscriber transactionSubscriber0 = mock(TransactionSubscriber.class, new ViolatedAssumptionAnswer());
      POBox pOBox0 = new POBox(transactionSubscriber0);
      transientJournal0.update(pOBox0, 0L);
      try { 
        centralPublisher0.subscribe(pOBox0, 5000L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The transaction journal has not yet reached transaction 5000. The last logged transaction was -1.
         //
         verifyException("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock0 = new PausableClock(brokenClock0);
      TransientJournal transientJournal0 = new TransientJournal();
      TransactionSubscriber transactionSubscriber0 = mock(TransactionSubscriber.class, new ViolatedAssumptionAnswer());
      POBox pOBox0 = new POBox(transactionSubscriber0);
      transientJournal0.update(pOBox0, 0L);
      CentralPublisher centralPublisher0 = new CentralPublisher(pausableClock0, transientJournal0);
      // Undeclared exception!
      try { 
        centralPublisher0.publish((Capsule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.prevayler.implementation.TransactionTimestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      BrokenClock brokenClock0 = new BrokenClock(mockDate0);
      PausableClock pausableClock0 = new PausableClock(brokenClock0);
      CentralPublisher centralPublisher0 = new CentralPublisher(pausableClock0, (Journal) null);
      // Undeclared exception!
      try { 
        centralPublisher0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher(brokenClock0, transientJournal0);
      POBox pOBox0 = new POBox((TransactionSubscriber) null);
      centralPublisher0.subscribe(pOBox0, 0L);
      Capsule capsule0 = mock(Capsule.class, new ViolatedAssumptionAnswer());
      doReturn((Capsule) null).when(capsule0).cleanCopy();
      centralPublisher0.publish(capsule0);
      // Undeclared exception!
      try { 
        centralPublisher0.subscribe((TransactionSubscriber) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock0 = new PausableClock(brokenClock0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher(pausableClock0, transientJournal0);
      centralPublisher0.close();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock0 = new PausableClock(brokenClock0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher(pausableClock0, transientJournal0);
      // Undeclared exception!
      try { 
        centralPublisher0.publish((Capsule) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         verifyException("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }
}

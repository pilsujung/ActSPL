/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 22 05:29:48 GMT 2022
 */

package org.prevayler.foundation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.prevayler.foundation.FileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileManager_ESTest extends FileManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = FileManager.produceDirectory("");
      file0.setLastModified(0L);
      File file1 = FileManager.produceDirectory("");
      assertEquals("", file1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = FileManager.produceDirectory(".O`<n#Ci");
      assertTrue(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = FileManager.produceDirectory("");
      file0.setWritable(false);
      File file1 = FileManager.produceDirectory("");
      assertNull(file1.getParent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      String string0 = mockFile0.getAbsolutePath();
      mockFile0.setReadable(false, false);
      File file0 = FileManager.produceDirectory(string0);
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setExecutable(false);
      File file0 = FileManager.produceDirectory("");
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileManager.produceDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.prevayler.foundation.FileManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile(":Jc-=Ei<;r$^iIR", ":Jc-=Ei<;r$^iIR");
      try { 
        FileManager.produceDirectory(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Path exists but is not a directory: C:\\Users\\user\\AppData\\Local\\Temp\\:Jc-=Ei<;r$^iIR0:Jc-=Ei<;r$^iIR
         //
         verifyException("org.prevayler.foundation.FileManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$?^#}");
      try { 
        FileManager.produceDirectory((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory doesn't exist and could not be created: $?^#}
         //
         verifyException("org.prevayler.foundation.FileManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("snapshot", "snapshot");
      FileManager.produceDirectory((File) mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        FileManager.produceDirectory(".");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Path exists but is not a directory: .
         //
         verifyException("org.prevayler.foundation.FileManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileManager fileManager0 = new FileManager();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileManager.produceDirectory((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}

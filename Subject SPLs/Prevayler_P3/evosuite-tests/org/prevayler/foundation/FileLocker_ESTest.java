/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 22 05:28:15 GMT 2022
 */

package org.prevayler.foundation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.OverlappingFileLockException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.prevayler.foundation.FileLocker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileLocker_ESTest extends FileLocker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#vq");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("#vq");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "E~M|uQ0f!/9/");
      FileLocker fileLocker0 = new FileLocker(mockFile0);
      RandomAccessFile randomAccessFile0 = fileLocker0.getStream();
      assertEquals(0L, randomAccessFile0.getFilePointer());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-[Q");
      FileLocker fileLocker0 = new FileLocker(mockFile0);
      fileLocker0.release();
      try { 
        fileLocker0.release();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "P");
      FileLocker fileLocker0 = new FileLocker(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileLocker0.release();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      File file0 = MockFile.createTempFile("#vq", "#vq");
      FileLocker fileLocker0 = new FileLocker(file0);
      MockFile mockFile0 = new MockFile("#vq");
      FileLocker fileLocker1 = null;
      try {
        fileLocker1 = new FileLocker(mockFile0);
        fail("Expecting exception: OverlappingFileLockException");
      
      } catch(OverlappingFileLockException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileLocker fileLocker0 = null;
      try {
        fileLocker0 = new FileLocker((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.prevayler.foundation.FileLocker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3#h]Me2l", "3#h]Me2l");
      File file0 = MockFile.createTempFile("3#h]Me2l", "6QO7+", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "b7S_V");
      FileLocker fileLocker0 = null;
      try {
        fileLocker0 = new FileLocker(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // Failed to create file
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("haeP'<,0I=Dy");
      FileLocker fileLocker0 = new FileLocker(mockFile0);
      FileLocker fileLocker1 = null;
      try {
        fileLocker1 = new FileLocker(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already locked internally
         //
         verifyException("org.prevayler.foundation.FileLocker", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      File file0 = MockFile.createTempFile("#vq", "#vq");
      FileLocker fileLocker0 = new FileLocker(file0);
      RandomAccessFile randomAccessFile0 = fileLocker0.getStream();
      assertEquals(0L, randomAccessFile0.length());
  }
}

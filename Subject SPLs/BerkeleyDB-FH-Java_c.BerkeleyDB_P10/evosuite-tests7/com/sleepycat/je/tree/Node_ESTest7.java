/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:33:06 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.INList;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class Node_ESTest7 extends Node_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.containsDuplicates();
      //  // Unstable assertion: assertEquals((-1L), dIN0.getLastId());
  }

  @Test
  public void test01()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(8);
      int int0 = dupCountLN0.getLogSize();
      //  // Unstable assertion: assertEquals(3L, dupCountLN0.getNodeId());
      //  // Unstable assertion: assertEquals(17, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(36);
      dupCountLN0.isValidForDelete();
      //  // Unstable assertion: assertEquals(4L, dupCountLN0.getNodeId());
  }

  @Test
  public void test03()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getLogType();
      //  // Unstable assertion: assertEquals(2L, dIN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      lN0.canBeAncestor(false);
      //  // Unstable assertion: assertEquals(6L, lN0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("V#(\"c:=a|`0+`!%x^");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        dBIN0.writeToLog(byteBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.rebuildINList((INList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.dumpString(2146644787, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2146644787
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.dump(1320);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1320
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = Node.getNextNodeId();
      //  // Unstable assertion: assertEquals(2210L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.getType();
      //  // Unstable assertion: assertEquals(2208L, dupCountLN0.getLastId());
  }

  @Test
  public void test12()  throws Throwable  {
      Node.setLastNodeId(2208L);
  }

  @Test
  public void test14()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      int int0 = mapLN0.getLevel();
      //  // Unstable assertion: assertEquals(10L, mapLN0.getLastId());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.containsDuplicates();
      //  // Unstable assertion: assertEquals(8L, bIN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LN lN0 = new LN(byteArray0);
      String string0 = lN0.toString();
      //  // Unstable assertion: assertEquals("<ln>\n  <node>3</node>\n  <data></data>\n</ln>", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LN lN0 = new LN(byteArray0);
      lN0.verify(byteArray0);
      //  // Unstable assertion: assertEquals(3L, lN0.getNodeId());
  }

  @Test
  public void test18()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      mapLN0.dumpLog(stringBuffer0, true);
      //  // Unstable assertion: assertEquals(128, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(7L, mapLN0.getLastId());
  }

  @Test
  public void test19()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      String string0 = nameLN0.shortDescription();
      //  // Unstable assertion: assertEquals("<com.sleepycat.je.tree.NameLN/0", string0);
      //  // Unstable assertion: assertEquals(5L, nameLN0.getLastId());
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = Node.getLastId();
      //  // Unstable assertion: assertEquals(5L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      MapLN mapLN0 = new MapLN();
      ByteBuffer byteBuffer0 = mS949_0.encode("__=*.ldJEG%");
      // Undeclared exception!
      try { 
        mapLN0.readFromLog(byteBuffer0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.dump(6);
      //  // Unstable assertion: assertEquals(2L, bIN0.getLastId());
  }

  @Test
  public void test23()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      boolean boolean0 = nameLN0.marshallOutsideWriteLatch();
      //  // Unstable assertion: assertEquals(1L, nameLN0.getLastId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      LN lN0 = new LN(byteArray0);
      lN0.setNodeId((byte)0);
      //  // Unstable assertion: assertEquals(6L, lN0.getLastId());
  }

  @Test
  public void test25()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      dupCountLN0.postFetchInit(databaseImpl0, 2146644787);
      //  // Unstable assertion: assertEquals(3L, dupCountLN0.getLastId());
  }

  @Test
  public void test26()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      TreeLocation treeLocation0 = new TreeLocation();
      try { 
        fileSummaryLN0.matchLNByNodeId(treeLocation0, 4481L);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // matchLNByNodeId called on non DIN/DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Node", e);
      }
  }

  @Test
  public void test27()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.countAsObsoleteWhenLogged();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(0L, dIN0.getLastId());
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      LN lN0 = new LN(byteArray0);
      long long0 = lN0.getMemorySizeIncludedByParent();
      //  // Unstable assertion: assertEquals(2L, lN0.getLastId());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test
  public void test29()  throws Throwable  {
      LN lN0 = new LN();
      long long0 = lN0.getNodeId();
      assertEquals(0L, long0);
  }
}

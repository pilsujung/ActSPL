/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:34:44 KST 2017
 */

package com.sleepycat.je;

import static org.junit.Assert.assertEquals;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class SequenceStats_ESTest7 extends SequenceStats_ESTest_scaffolding7 {

  @Test
  public void test00()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      long long0 = sequenceStats0.getValue();
      assertEquals(3578L, sequenceStats0.getLastValue());
      assertEquals(3578L, sequenceStats0.getCurrent());
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578, sequenceStats0.getNCachedGets());
      assertEquals(3578L, sequenceStats0.getMax());
      assertEquals(3578, sequenceStats0.getNGets());
      assertEquals(3578L, sequenceStats0.getMin());
      assertEquals(3578L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1361), 1, 1, (-1337L), (-1337L), 1, (-1L), (-1361));
      long long0 = sequenceStats0.getValue();
      assertEquals((-1L), sequenceStats0.getMax());
      assertEquals(-1361, sequenceStats0.getCacheSize());
      assertEquals((-1337L), long0);
      assertEquals(1L, sequenceStats0.getCurrent());
      assertEquals(1L, sequenceStats0.getMin());
      assertEquals(1, sequenceStats0.getNCachedGets());
      assertEquals(-1361, sequenceStats0.getNGets());
      assertEquals((-1337L), sequenceStats0.getLastValue());
  }

  @Test
  public void test02()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      int int0 = sequenceStats0.getNGets();
      assertEquals(3578L, sequenceStats0.getMin());
      assertEquals(3578L, sequenceStats0.getMax());
      assertEquals(3578L, sequenceStats0.getValue());
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578L, sequenceStats0.getLastValue());
      assertEquals(3578, int0);
      assertEquals(3578, sequenceStats0.getNCachedGets());
      assertEquals(3578L, sequenceStats0.getCurrent());
  }

  @Test
  public void test03()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1652), (-1652), (-1652), (-1652), (-1652), (-1652), 313L, (-1652));
      int int0 = sequenceStats0.getNGets();
      assertEquals((-1652L), sequenceStats0.getLastValue());
      assertEquals((-1652), int0);
      assertEquals((-1652L), sequenceStats0.getCurrent());
      assertEquals((-1652L), sequenceStats0.getMin());
      assertEquals(-1652, sequenceStats0.getCacheSize());
      assertEquals(-1652, sequenceStats0.getNCachedGets());
      assertEquals(313L, sequenceStats0.getMax());
      assertEquals((-1652L), sequenceStats0.getValue());
  }

  @Test
  public void test04()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0, 0, 0, 0, 0);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, int0);
      assertEquals(0, sequenceStats0.getNGets());
  }

  @Test
  public void test05()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(3578L, sequenceStats0.getValue());
      assertEquals(3578L, sequenceStats0.getMax());
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578L, sequenceStats0.getLastValue());
      assertEquals(3578, int0);
      assertEquals(3578L, sequenceStats0.getMin());
      assertEquals(3578, sequenceStats0.getNGets());
      assertEquals(3578L, sequenceStats0.getCurrent());
  }

  @Test
  public void test06()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      long long0 = sequenceStats0.getMin();
      assertEquals(3578, sequenceStats0.getNCachedGets());
      assertEquals(3578, sequenceStats0.getNGets());
      assertEquals(3578L, sequenceStats0.getCurrent());
      assertEquals(3578L, long0);
      assertEquals(3578L, sequenceStats0.getMax());
      assertEquals(3578L, sequenceStats0.getValue());
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578L, sequenceStats0.getLastValue());
  }

  @Test
  public void test07()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(201, 201, 201, 201, (-345L), (-345L), 201, 201);
      long long0 = sequenceStats0.getMin();
      assertEquals((-345L), long0);
      assertEquals(201L, sequenceStats0.getValue());
      assertEquals(201L, sequenceStats0.getMax());
      assertEquals((-345L), sequenceStats0.getLastValue());
      assertEquals(201, sequenceStats0.getCacheSize());
      assertEquals(201L, sequenceStats0.getCurrent());
      assertEquals(201, sequenceStats0.getNCachedGets());
      assertEquals(201, sequenceStats0.getNGets());
  }

  @Test
  public void test08()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      long long0 = sequenceStats0.getMax();
      assertEquals(3578L, sequenceStats0.getMin());
      assertEquals(3578L, sequenceStats0.getValue());
      assertEquals(3578L, sequenceStats0.getCurrent());
      assertEquals(3578, sequenceStats0.getNGets());
      assertEquals(3578, sequenceStats0.getNCachedGets());
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578L, sequenceStats0.getLastValue());
      assertEquals(3578L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), (-1), (-1), (-1), (-1), (-1L), (-1L), 1);
      long long0 = sequenceStats0.getMax();
      assertEquals(1, sequenceStats0.getCacheSize());
      assertEquals((-1L), sequenceStats0.getLastValue());
      assertEquals(-1, sequenceStats0.getNCachedGets());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals((-1L), sequenceStats0.getMin());
      assertEquals((-1L), sequenceStats0.getCurrent());
      assertEquals((-1L), long0);
  }

  @Test
  public void test10()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      long long0 = sequenceStats0.getLastValue();
      assertEquals(3578L, sequenceStats0.getMin());
      assertEquals(3578L, sequenceStats0.getCurrent());
      assertEquals(3578, sequenceStats0.getNGets());
      assertEquals(3578L, sequenceStats0.getValue());
      assertEquals(3578, sequenceStats0.getNCachedGets());
      assertEquals(3578L, long0);
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578L, sequenceStats0.getMax());
  }

  @Test
  public void test11()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-3780), (-3780), 0L, 1747L, (-1554L), (-1554L), 1747L, (-3780));
      long long0 = sequenceStats0.getLastValue();
      assertEquals((-1554L), sequenceStats0.getMin());
      assertEquals(-3780, sequenceStats0.getNCachedGets());
      assertEquals(1747L, sequenceStats0.getMax());
      assertEquals(-3780, sequenceStats0.getCacheSize());
      assertEquals((-1554L), long0);
      assertEquals(1747L, sequenceStats0.getValue());
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(-3780, sequenceStats0.getNGets());
  }

  @Test
  public void test12()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578);
      long long0 = sequenceStats0.getCurrent();
      assertEquals(3578L, sequenceStats0.getLastValue());
      assertEquals(3578, sequenceStats0.getCacheSize());
      assertEquals(3578, sequenceStats0.getNCachedGets());
      assertEquals(3578L, long0);
      assertEquals(3578L, sequenceStats0.getValue());
      assertEquals(3578L, sequenceStats0.getMax());
      assertEquals(3578, sequenceStats0.getNGets());
      assertEquals(3578L, sequenceStats0.getMin());
  }

  @Test
  public void test13()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(2622, 2622, (-2283L), 2622, (-2283L), (-2283L), 2622, 2622);
      long long0 = sequenceStats0.getCurrent();
      assertEquals(2622, sequenceStats0.getCacheSize());
      assertEquals(2622, sequenceStats0.getNCachedGets());
      assertEquals((-2283L), sequenceStats0.getLastValue());
      assertEquals((-2283L), sequenceStats0.getMin());
      assertEquals(2622L, sequenceStats0.getMax());
      assertEquals(2622L, sequenceStats0.getValue());
      assertEquals(2622, sequenceStats0.getNGets());
      assertEquals((-2283L), long0);
  }

  @Test
  public void test14()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(2622, 2622, (-2283L), 2622, (-2283L), (-2283L), 2622, 2622);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals((-2283L), sequenceStats0.getCurrent());
      assertEquals(2622, int0);
      assertEquals(2622, sequenceStats0.getNCachedGets());
      assertEquals(2622L, sequenceStats0.getValue());
      assertEquals(2622, sequenceStats0.getNGets());
      assertEquals(2622L, sequenceStats0.getMax());
      assertEquals((-2283L), sequenceStats0.getLastValue());
      assertEquals((-2283L), sequenceStats0.getMin());
  }

  @Test
  public void test15()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(328, 328, 328, 328, (-1L), 328, 1L, (-1667));
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(328, sequenceStats0.getNCachedGets());
      assertEquals((-1667), int0);
      assertEquals(328, sequenceStats0.getNGets());
      assertEquals(328L, sequenceStats0.getValue());
      assertEquals(328L, sequenceStats0.getCurrent());
      assertEquals(1L, sequenceStats0.getMax());
      assertEquals((-1L), sequenceStats0.getLastValue());
      assertEquals(328L, sequenceStats0.getMin());
  }

  @Test
  public void test16()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 1105L, 1105L, 1105L, (-3604L), 1105L, 0);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(1105L, sequenceStats0.getMax());
      assertEquals((-3604L), sequenceStats0.getMin());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(1105L, sequenceStats0.getCurrent());
      assertEquals(0, int0);
      assertEquals(1105L, sequenceStats0.getLastValue());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(1105L, sequenceStats0.getValue());
  }

  @Test
  public void test17()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, (-140), 0L, 0, 0L, (-140), (-1258L), 0);
      long long0 = sequenceStats0.getValue();
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(0L, long0);
      assertEquals(-140, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals((-140L), sequenceStats0.getMin());
      assertEquals((-1258L), sequenceStats0.getMax());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getLastValue());
  }

  @Test
  public void test18()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, (-163), (-163), (-163), 0L, 0L, 0L, (-163));
      long long0 = sequenceStats0.getMin();
      assertEquals((-163L), sequenceStats0.getCurrent());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(-163, sequenceStats0.getNCachedGets());
      assertEquals((-163L), sequenceStats0.getValue());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(0L, long0);
      assertEquals(0L, sequenceStats0.getMax());
      assertEquals(-163, sequenceStats0.getCacheSize());
  }

  @Test
  public void test19()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0L, 0L, 0, 0, (-212));
      sequenceStats0.getCurrent();
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(-212, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNGets());
  }

  @Test
  public void test20()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-3780), (-3780), 0L, 1747L, (-1554L), (-1554L), 1747L, (-3780));
      String string0 = sequenceStats0.toString();
      assertEquals("nGets=-3780\nnCachedGets=-3780\ncurrent=0\nvalue=1747\nlastValue=-1554\nmin=-1554\nmax=1747\ncacheSize=-3780", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, (-962), (-1L), 0L, 0L, (-1L), 0, 0);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals((-962), int0);
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getMax());
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals((-1L), sequenceStats0.getMin());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals((-1L), sequenceStats0.getCurrent());
  }

  @Test
  public void test22()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0L, 645L, 0L, (-2127L), (-1L), 0);
      int int0 = sequenceStats0.getNGets();
      assertEquals(0, int0);
      assertEquals((-2127L), sequenceStats0.getMin());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals((-1L), sequenceStats0.getMax());
      assertEquals(645L, sequenceStats0.getValue());
      assertEquals(0, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test23()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 1314, 1314, (-3534L), (-1L), (-1L), 0, 0);
      long long0 = sequenceStats0.getMax();
      assertEquals(1314L, sequenceStats0.getCurrent());
      assertEquals(1314, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals((-1L), sequenceStats0.getLastValue());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals((-3534L), sequenceStats0.getValue());
      assertEquals(0L, long0);
      assertEquals((-1L), sequenceStats0.getMin());
  }

  @Test
  public void test24()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0L, 0L, 0, 0, (-212));
      sequenceStats0.getLastValue();
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(-212, sequenceStats0.getCacheSize());
  }
}

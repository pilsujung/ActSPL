/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:01:51 KST 2017
 */

package com.sleepycat.je.recovery;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.log.LogManager;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class RootFlusher_ESTest7 extends RootFlusher_ESTest_scaffolding7 {

  @Test
  public void test1()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, 0L);
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, 0L, (byte)48);
      try { 
        rootFlusher0.doWork(childReference0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of 0x0/0x0 state=50 java.lang.NullPointerException
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, 0L);
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, 0L, (byte)48);
      DIN dIN0 = new DIN();
      dIN0.setDirty(true);
      // Undeclared exception!
      try { 
        rootFlusher0.hook599(childReference0, dIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, 0L);
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, 0L, (byte)48);
      DIN dIN0 = new DIN();
      rootFlusher0.hook599(childReference0, dIN0);
      boolean boolean0 = rootFlusher0.stillRoot();
      //  // Unstable assertion: assertEquals(21L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, 2706L);
      rootFlusher0.doWork((ChildReference) null);
      //  // Unstable assertion: assertEquals(16L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test5()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, (-1976L));
      DupCountLN dupCountLN0 = new DupCountLN();
      byte[] byteArray0 = new byte[9];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)0, (byte) (-1));
      // Undeclared exception!
      try { 
        rootFlusher0.doWork(childReference0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DupCountLN cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.recovery.RootFlusher", e);
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, (-1976L));
      boolean boolean0 = rootFlusher0.getFlushed();
      //  // Unstable assertion: assertEquals(6L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      RootFlusher rootFlusher0 = new RootFlusher(databaseImpl0, (LogManager) null, 0L);
      boolean boolean0 = rootFlusher0.stillRoot();
      //  // Unstable assertion: assertEquals(1L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertFalse(boolean0);
  }
}

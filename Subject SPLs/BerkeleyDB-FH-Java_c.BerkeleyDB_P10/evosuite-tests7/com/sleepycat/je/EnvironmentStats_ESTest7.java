/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:16:57 KST 2017
 */

package com.sleepycat.je;

import static org.junit.Assert.assertEquals;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class EnvironmentStats_ESTest7 extends EnvironmentStats_ESTest_scaffolding7 {

  @Test
  public void test000()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setSplitBins((-884));
      int int0 = environmentStats0.getSplitBins();
      assertEquals((-884), int0);
  }

  @Test
  public void test001()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setRequiredEvictBytes(1790L);
      long long0 = environmentStats0.getRequiredEvictBytes();
      assertEquals(1790L, long0);
  }

  @Test
  public void test002()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      
      environmentStats0.setRequiredEvictBytes((-1));
      long long0 = environmentStats0.getRequiredEvictBytes();
      assertEquals((-1L), long0);
  }

  @Test
  public void test003()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setProcessedBins(1128);
      int int0 = environmentStats0.getProcessedBins();
      assertEquals(1128, int0);
  }

  @Test
  public void test004()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setProcessedBins((-390));
      int int0 = environmentStats0.getProcessedBins();
      assertEquals((-390), int0);
  }

  @Test
  public void test005()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNonEmptyBins((-284));
      int int0 = environmentStats0.getNonEmptyBins();
      assertEquals((-284), int0);
  }

  @Test
  public void test006()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNToBeCleanedLNsProcessed(2120);
      int int0 = environmentStats0.getNToBeCleanedLNsProcessed();
      assertEquals(2120, int0);
  }

  @Test
  public void test007()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNToBeCleanedLNsProcessed((-2314));
      int int0 = environmentStats0.getNToBeCleanedLNsProcessed();
      assertEquals((-2314), int0);
  }

  @Test
  public void test008()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNTempBufferWrites(1346L);
      long long0 = environmentStats0.getNTempBufferWrites();
      assertEquals(1346L, long0);
  }

  @Test
  public void test009()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNTempBufferWrites((-1853L));
      long long0 = environmentStats0.getNTempBufferWrites();
      assertEquals((-1853L), long0);
  }

  @Test
  public void test010()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatIteratorReads(2966L);
      long long0 = environmentStats0.getNRepeatIteratorReads();
      assertEquals(2966L, long0);
  }

  @Test
  public void test011()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatIteratorReads((-36L));
      long long0 = environmentStats0.getNRepeatIteratorReads();
      assertEquals((-36L), long0);
  }

  @Test
  public void test012()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatFaultReads(1918L);
      long long0 = environmentStats0.getNRepeatFaultReads();
      assertEquals(1918L, long0);
  }

  @Test
  public void test013()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNRepeatFaultReads((-620));
      long long0 = environmentStats0.getNRepeatFaultReads();
      assertEquals((-620L), long0);
  }

  @Test
  public void test014()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsProcessed(367);
      int int0 = environmentStats0.getNPendingLNsProcessed();
      assertEquals(367, int0);
  }

  @Test
  public void test015()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsLocked(3618);
      int int0 = environmentStats0.getNPendingLNsLocked();
      assertEquals(3618, int0);
  }

  @Test
  public void test016()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsLocked((-168));
      int int0 = environmentStats0.getNPendingLNsLocked();
      assertEquals((-168), int0);
  }

  @Test
  public void test017()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNotResident(733L);
      long long0 = environmentStats0.getNNotResident();
      assertEquals(733L, long0);
  }

  @Test
  public void test018()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNotResident((-1388));
      long long0 = environmentStats0.getNNotResident();
      assertEquals((-1388L), long0);
  }

  @Test
  public void test019()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesSelected(1912);
      long long0 = environmentStats0.getNNodesSelected();
      assertEquals(1912L, long0);
  }

  @Test
  public void test020()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesScanned(2087L);
      long long0 = environmentStats0.getNNodesScanned();
      assertEquals(2087L, long0);
  }

  @Test
  public void test021()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesScanned((-4));
      long long0 = environmentStats0.getNNodesScanned();
      assertEquals((-4L), long0);
  }

  @Test
  public void test022()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNNodesExplicitlyEvicted(34L);
      long long0 = environmentStats0.getNNodesExplicitlyEvicted();
      assertEquals(34L, long0);
  }

  @Test
  public void test023()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      
      environmentStats0.setNNodesExplicitlyEvicted((-1L));
      long long0 = environmentStats0.getNNodesExplicitlyEvicted();
      assertEquals((-1L), long0);
  }

  @Test
  public void test024()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNMarkedLNsProcessed(1);
      int int0 = environmentStats0.getNMarkedLNsProcessed();
      assertEquals(1, int0);
  }

  @Test
  public void test025()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLogBuffers(774);
      int int0 = environmentStats0.getNLogBuffers();
      assertEquals(774, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLogBuffers((-2426));
      int int0 = environmentStats0.getNLogBuffers();
      assertEquals((-2426), int0);
  }

  @Test
  public void test027()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsObsolete(443);
      int int0 = environmentStats0.getNLNsObsolete();
      assertEquals(443, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsObsolete((-1360));
      int int0 = environmentStats0.getNLNsObsolete();
      assertEquals((-1360), int0);
  }

  @Test
  public void test029()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMigrated(29);
      int int0 = environmentStats0.getNLNsMigrated();
      assertEquals(29, int0);
  }

  @Test
  public void test030()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMigrated((-29));
      int int0 = environmentStats0.getNLNsMigrated();
      assertEquals((-29), int0);
  }

  @Test
  public void test031()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMarked(1196);
      int int0 = environmentStats0.getNLNsMarked();
      assertEquals(1196, int0);
  }

  @Test
  public void test032()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsMarked((-862));
      int int0 = environmentStats0.getNLNsMarked();
      assertEquals((-862), int0);
  }

  @Test
  public void test033()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsLocked(1);
      int int0 = environmentStats0.getNLNsLocked();
      assertEquals(1, int0);
  }

  @Test
  public void test034()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsLocked((-754));
      int int0 = environmentStats0.getNLNsLocked();
      assertEquals((-754), int0);
  }

  @Test
  public void test035()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsDead(1);
      int int0 = environmentStats0.getNLNsDead();
      assertEquals(1, int0);
  }

  @Test
  public void test036()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsDead((-2754));
      int int0 = environmentStats0.getNLNsDead();
      assertEquals((-2754), int0);
  }

  @Test
  public void test037()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsCleaned(367);
      int int0 = environmentStats0.getNLNsCleaned();
      assertEquals(367, int0);
  }

  @Test
  public void test038()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNsCleaned((-2227));
      int int0 = environmentStats0.getNLNsCleaned();
      assertEquals((-2227), int0);
  }

  @Test
  public void test039()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNQueueHits(1491);
      int int0 = environmentStats0.getNLNQueueHits();
      assertEquals(1491, int0);
  }

  @Test
  public void test040()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNLNQueueHits((-428));
      int int0 = environmentStats0.getNLNQueueHits();
      assertEquals((-428), int0);
  }

  @Test
  public void test041()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsObsolete(1015);
      int int0 = environmentStats0.getNINsObsolete();
      assertEquals(1015, int0);
  }

  @Test
  public void test042()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsObsolete((-1065));
      int int0 = environmentStats0.getNINsObsolete();
      assertEquals((-1065), int0);
  }

  @Test
  public void test043()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsMigrated((-650));
      int int0 = environmentStats0.getNINsMigrated();
      assertEquals((-650), int0);
  }

  @Test
  public void test044()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsDead((-477));
      int int0 = environmentStats0.getNINsDead();
      assertEquals((-477), int0);
  }

  @Test
  public void test045()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsCleaned(1);
      int int0 = environmentStats0.getNINsCleaned();
      assertEquals(1, int0);
  }

  @Test
  public void test046()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsCleaned((-2549));
      int int0 = environmentStats0.getNINsCleaned();
      assertEquals((-2549), int0);
  }

  @Test
  public void test047()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullINFlush((-291));
      int int0 = environmentStats0.getNFullINFlush();
      assertEquals((-291), int0);
  }

  @Test
  public void test048()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0, environmentStats0.getNFullBINFlush());
      
      environmentStats0.setNFullBINFlush(1);
      int int0 = environmentStats0.getNFullBINFlush();
      assertEquals(1, int0);
  }

  @Test
  public void test049()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullBINFlush((-184));
      int int0 = environmentStats0.getNFullBINFlush();
      assertEquals((-184), int0);
  }

  @Test
  public void test050()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNEvictPasses(3417);
      int int0 = environmentStats0.getNEvictPasses();
      assertEquals(3417, int0);
  }

  @Test
  public void test051()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNEvictPasses((-1559));
      int int0 = environmentStats0.getNEvictPasses();
      assertEquals((-1559), int0);
  }

  @Test
  public void test052()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNDeltaINFlush(1182);
      int int0 = environmentStats0.getNDeltaINFlush();
      assertEquals(1182, int0);
  }

  @Test
  public void test053()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNDeltaINFlush((-1178));
      int int0 = environmentStats0.getNDeltaINFlush();
      assertEquals((-1178), int0);
  }

  @Test
  public void test054()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNClusterLNsProcessed(10);
      int int0 = environmentStats0.getNClusterLNsProcessed();
      assertEquals(10, int0);
  }

  @Test
  public void test055()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNClusterLNsProcessed((-2918));
      int int0 = environmentStats0.getNClusterLNsProcessed();
      assertEquals((-2918), int0);
  }

  @Test
  public void test056()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerRuns(558);
      int int0 = environmentStats0.getNCleanerRuns();
      assertEquals(558, int0);
  }

  @Test
  public void test057()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerRuns((-1061));
      int int0 = environmentStats0.getNCleanerRuns();
      assertEquals((-1061), int0);
  }

  @Test
  public void test058()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerEntriesRead(1);
      int int0 = environmentStats0.getNCleanerEntriesRead();
      assertEquals(1, int0);
  }

  @Test
  public void test059()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerEntriesRead((-1));
      int int0 = environmentStats0.getNCleanerEntriesRead();
      assertEquals((-1), int0);
  }

  @Test
  public void test060()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerDeletions(873);
      int int0 = environmentStats0.getNCleanerDeletions();
      assertEquals(873, int0);
  }

  @Test
  public void test061()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCleanerDeletions((-277));
      int int0 = environmentStats0.getNCleanerDeletions();
      assertEquals((-277), int0);
  }

  @Test
  public void test062()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCheckpoints(1912);
      int int0 = environmentStats0.getNCheckpoints();
      assertEquals(1912, int0);
  }

  @Test
  public void test063()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCacheMiss(1438);
      long long0 = environmentStats0.getNCacheMiss();
      assertEquals(1438L, long0);
  }

  @Test
  public void test064()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCacheMiss((-1L));
      long long0 = environmentStats0.getNCacheMiss();
      assertEquals((-1L), long0);
  }

  @Test
  public void test065()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNBINsStripped(2802L);
      long long0 = environmentStats0.getNBINsStripped();
      assertEquals(2802L, long0);
  }

  @Test
  public void test066()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0L, environmentStats0.getNBINsStripped());
      
      environmentStats0.setNBINsStripped((-1));
      long long0 = environmentStats0.getNBINsStripped();
      assertEquals((-1L), long0);
  }

  @Test
  public void test067()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      
      environmentStats0.setLastCheckpointStart(0L);
      environmentStats0.getLastCheckpointStart();
      assertEquals(0L, environmentStats0.getNNodesScanned());
  }

  @Test
  public void test068()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setLastCheckpointStart(7513L);
      long long0 = environmentStats0.getLastCheckpointStart();
      assertEquals(7513L, long0);
  }

  @Test
  public void test069()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setLastCheckpointId(1100);
      long long0 = environmentStats0.getLastCheckpointId();
      assertEquals(1100L, long0);
  }

  @Test
  public void test070()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      
      environmentStats0.setLastCheckpointId((-1L));
      long long0 = environmentStats0.getLastCheckpointId();
      assertEquals((-1L), long0);
  }

  @Test
  public void test071()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      
      environmentStats0.setLastCheckpointEnd(0);
      environmentStats0.getLastCheckpointEnd();
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test072()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setLastCheckpointEnd(3597L);
      long long0 = environmentStats0.getLastCheckpointEnd();
      assertEquals(3597L, long0);
  }

  @Test
  public void test073()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setInCompQueueSize(630);
      int int0 = environmentStats0.getInCompQueueSize();
      assertEquals(630, int0);
  }

  @Test
  public void test074()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setInCompQueueSize((-1));
      int int0 = environmentStats0.getInCompQueueSize();
      assertEquals((-1), int0);
  }

  @Test
  public void test075()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setDbClosedBins(1014);
      int int0 = environmentStats0.getDbClosedBins();
      assertEquals(1014, int0);
  }

  @Test
  public void test076()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setDbClosedBins((-5521));
      int int0 = environmentStats0.getDbClosedBins();
      assertEquals((-5521), int0);
  }

  @Test
  public void test077()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCursorsBins(891);
      int int0 = environmentStats0.getCursorsBins();
      assertEquals(891, int0);
  }

  @Test
  public void test078()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCursorsBins((-1));
      int int0 = environmentStats0.getCursorsBins();
      assertEquals((-1), int0);
  }

  @Test
  public void test079()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCleanerBacklog(1154);
      int int0 = environmentStats0.getCleanerBacklog();
      assertEquals(1154, int0);
  }

  @Test
  public void test080()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes(1L);
      long long0 = environmentStats0.getCacheTotalBytes();
      assertEquals(1L, long0);
  }

  @Test
  public void test081()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCacheDataBytes(2109L);
      long long0 = environmentStats0.getCacheDataBytes();
      assertEquals(2109L, environmentStats0.getCacheTotalBytes());
      assertEquals(2109L, long0);
  }

  @Test
  public void test082()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCacheDataBytes((-270L));
      long long0 = environmentStats0.getCacheDataBytes();
      assertEquals((-270L), environmentStats0.getCacheTotalBytes());
      assertEquals((-270L), long0);
  }

  @Test
  public void test083()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes(1L);
      long long0 = environmentStats0.getBufferBytes();
      assertEquals(1L, environmentStats0.getCacheTotalBytes());
      assertEquals(1L, long0);
  }

  @Test
  public void test084()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes((-1462L));
      long long0 = environmentStats0.getBufferBytes();
      assertEquals((-1462L), environmentStats0.getCacheTotalBytes());
      assertEquals((-1462L), long0);
  }

  @Test
  public void test085()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setBufferBytes((-1462L));
      long long0 = environmentStats0.getCacheTotalBytes();
      assertEquals((-1462L), environmentStats0.getBufferBytes());
      assertEquals((-1462L), long0);
  }

  @Test
  public void test087()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.hook60();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }

  @Test
  public void test088()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getCacheTotalBytes();
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
  }

  @Test
  public void test089()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNQueueHits();
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
  }

  @Test
  public void test090()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getProcessedBins();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
  }

  @Test
  public void test091()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNNodesExplicitlyEvicted();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesSelected());
  }

  @Test
  public void test092()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNClusterLNsProcessed();
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
  }

  @Test
  public void test093()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNNodesScanned();
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test094()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsLocked();
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
  }

  @Test
  public void test095()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCheckpoints();
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test096()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getBufferBytes();
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
  }

  @Test
  public void test097()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsMarked();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test098()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsObsolete();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
  }

  @Test
  public void test099()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsDead();
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test100()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsMigrated();
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
  }

  @Test
  public void test101()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getRequiredEvictBytes();
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
  }

  @Test
  public void test102()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNRepeatIteratorReads();
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test103()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getInCompQueueSize();
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
  }

  @Test
  public void test104()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNEvictPasses();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test105()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNonEmptyBins(1736);
      int int0 = environmentStats0.getNonEmptyBins();
      assertEquals(1736, int0);
  }

  @Test
  public void test106()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNFullINFlush(272);
      int int0 = environmentStats0.getNFullINFlush();
      assertEquals(272, int0);
  }

  @Test
  public void test107()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNPendingLNsLocked();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
  }

  @Test
  public void test108()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNFullBINFlush();
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test109()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNCheckpoints((-1900));
      int int0 = environmentStats0.getNCheckpoints();
      assertEquals((-1900), int0);
  }

  @Test
  public void test110()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getSplitBins();
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
  }

  @Test
  public void test111()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsMigrated();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }

  @Test
  public void test112()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNNodesSelected();
      assertEquals(0L, long0);
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
  }

  @Test
  public void test113()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNFullINFlush();
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test114()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNNotResident();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test115()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNToBeCleanedLNsProcessed();
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
  }

  @Test
  public void test116()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getCleanerBacklog();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
  }

  @Test
  public void test117()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNMarkedLNsProcessed();
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test118()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsObsolete();
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
  }

  @Test
  public void test119()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLogBuffers();
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test120()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNPendingLNsProcessed();
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
  }

  @Test
  public void test121()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      assertEquals(0L, environmentStats0.getNNodesSelected());
      
      environmentStats0.setNNodesSelected((-1L));
      long long0 = environmentStats0.getNNodesSelected();
      assertEquals((-1L), long0);
  }

  @Test
  public void test122()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNonEmptyBins();
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test123()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setSplitBins(2784);
      int int0 = environmentStats0.getSplitBins();
      assertEquals(2784, int0);
  }

  @Test
  public void test124()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNTempBufferWrites();
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCleanerBacklog());
  }

  @Test
  public void test125()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getNBINsStripped();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, long0);
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test126()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getCursorsBins();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
  }

  @Test
  public void test127()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNRepeatFaultReads();
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNonEmptyBins());
  }

  @Test
  public void test128()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsDead();
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesSelected());
  }

  @Test
  public void test129()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsDead(2410);
      int int0 = environmentStats0.getNINsDead();
      assertEquals(2410, int0);
  }

  @Test
  public void test130()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getDbClosedBins();
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test131()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCleanerDeletions();
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test132()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setCleanerBacklog((-1569));
      int int0 = environmentStats0.getCleanerBacklog();
      assertEquals((-1569), int0);
  }

  @Test
  public void test133()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNPendingLNsProcessed((-1));
      int int0 = environmentStats0.getNPendingLNsProcessed();
      assertEquals((-1), int0);
  }

  @Test
  public void test134()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNLNsCleaned();
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }

  @Test
  public void test135()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getLastCheckpointEnd();
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals((-1L), long0);
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
  }

  @Test
  public void test136()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNDeltaINFlush();
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, int0);
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getInCompQueueSize());
  }

  @Test
  public void test137()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNINsCleaned();
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getSplitBins());
  }

  @Test
  public void test138()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getCacheDataBytes();
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0L, environmentStats0.getNBINsStripped());
  }

  @Test
  public void test139()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNINsMigrated(802);
      int int0 = environmentStats0.getNINsMigrated();
      assertEquals(802, int0);
  }

  @Test
  public void test140()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCleanerRuns();
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, int0);
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
  }

  @Test
  public void test141()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getLastCheckpointStart();
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals((-1L), long0);
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
  }

  @Test
  public void test142()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      int int0 = environmentStats0.getNCleanerEntriesRead();
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNFullBINFlush());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, int0);
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCleanerRuns());
  }

  @Test
  public void test143()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.setNMarkedLNsProcessed((-1));
      int int0 = environmentStats0.getNMarkedLNsProcessed();
      assertEquals((-1), int0);
  }

  @Test
  public void test144()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      environmentStats0.getNCacheMiss();
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0L, environmentStats0.getLastCheckpointId());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }

  @Test
  public void test146()  throws Throwable  {
      EnvironmentStats environmentStats0 = new EnvironmentStats();
      long long0 = environmentStats0.getLastCheckpointId();
      assertEquals(0, environmentStats0.getNEvictPasses());
      assertEquals(0L, environmentStats0.getRequiredEvictBytes());
      assertEquals(0, environmentStats0.getCursorsBins());
      assertEquals(0, environmentStats0.getNCheckpoints());
      assertEquals(0L, long0);
      assertEquals(0, environmentStats0.getDbClosedBins());
      assertEquals(0L, environmentStats0.getNNodesExplicitlyEvicted());
      assertEquals(0, environmentStats0.getNCleanerDeletions());
      assertEquals(0, environmentStats0.getNFullINFlush());
      assertEquals((-1L), environmentStats0.getLastCheckpointEnd());
      assertEquals(0, environmentStats0.getInCompQueueSize());
      assertEquals(0, environmentStats0.getNDeltaINFlush());
      assertEquals(0, environmentStats0.getNonEmptyBins());
      assertEquals(0, environmentStats0.getSplitBins());
      assertEquals(0, environmentStats0.getNCleanerRuns());
      assertEquals(0, environmentStats0.getCleanerBacklog());
      assertEquals(0L, environmentStats0.getNBINsStripped());
      assertEquals(0, environmentStats0.getProcessedBins());
      assertEquals(0, environmentStats0.getNINsObsolete());
      assertEquals(0L, environmentStats0.getNNodesScanned());
      assertEquals((-1L), environmentStats0.getLastCheckpointStart());
      assertEquals(0L, environmentStats0.getNNodesSelected());
      assertEquals(0, environmentStats0.getNFullBINFlush());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 02:59:17 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.FileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class DbLsn_ESTest6 extends DbLsn_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      long long0 = DbLsn.makeLsn(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = DbLsn.makeLsn((-1210L), 2147483648L);
      assertEquals((-5194762944512L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      long long1 = DbLsn.longToLsn(long0);
      assertTrue(long0.equals((Object)long1));
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-3597L), (-3597L), (-3597L));
      assertEquals(0L, long0);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(1102L);
      assertEquals(1102L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = DbLsn.getFileNumber((-1475L));
      assertEquals(4294967295L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(1014L, (FileManager) null, 4L, 0);
      assertEquals(1010L, long0);
  }

  @Test
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance((-4600L), (FileManager) null, 255L, 1444L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-5194762944512L), (-2631L), 4294967295L);
      assertEquals(5194762940672L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(8589934459L, 0L, 0L);
      assertEquals(4294967163L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(1521L, 1L, 0L);
      assertEquals(1520L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-3125L), (-9223372036854775808L), (-3125L));
      assertEquals((-6706591432704L), long0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = DbLsn.compareTo(1521L, 1521L);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = DbLsn.compareTo(4294967295L, 0L);
      assertEquals(1, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = DbLsn.dumpString(4284L, 9);
      assertEquals("         <DbLsn val=\"0x0/0x10bc\"/>", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(0);
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = DbLsn.getFileNumber(815L);
      assertEquals(0L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance(2270L, (FileManager) null, 8589931012L, 8589931012L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(1L, (FileManager) null, (-1L), 1L);
      assertEquals(1L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance((-975L), (FileManager) null, (-975L), (-975L));
      assertEquals(0L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(1102L, (-1L), 476L);
      assertEquals(1102L, long0);
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo(260L, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-1), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = DbLsn.compareTo((-341L), 4294967295L);
      assertEquals(1, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = DbLsn.compareTo(98304L, (-303L));
      assertEquals((-1), int0);
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = DbLsn.longToLsn((Long) null);
      assertEquals((-1L), long0);
  }

  @Test
  public void test28()  throws Throwable  {
      Long long0 = new Long(0L);
      long long1 = DbLsn.longToLsn(long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.dumpString(5194762940672L, (-1448));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1448
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = DbLsn.toString(10000000L);
      assertEquals("<DbLsn val=\"0x0/0x989680\"/>", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = DbLsn.makeLsn(815L, 0L);
      assertEquals(3500398346240L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(0, 5823975651702L, 1L);
      assertEquals(4294966977L, long0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = DbLsn.getNoFormatString((-1210L));
      assertEquals("0xffffffff/0xfffffb46", string0);
  }
}

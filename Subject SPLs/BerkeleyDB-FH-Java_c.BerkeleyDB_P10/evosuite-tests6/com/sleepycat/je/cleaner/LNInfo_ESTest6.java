/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 23:50:13 KST 2017
 */

package com.sleepycat.je.cleaner;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.cleaner.FileSummary;
import com.sleepycat.je.cleaner.LNInfo;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.FileSummaryLN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.NameLN;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class LNInfo_ESTest6 extends LNInfo_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[4];
      LNInfo lNInfo0 = new LNInfo((LN) null, databaseId0, byteArray0, byteArray0);
      LN lN0 = lNInfo0.getLN();
      assertNull(lN0);
  }

  @Test
  public void test01()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      byte[] byteArray0 = new byte[1];
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, byteArray0);
      LN lN1 = lNInfo0.getLN();
      //  // Unstable assertion: assertEquals(64L, lN1.getNodeId());
  }

  @Test
  public void test02()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[3];
      LNInfo lNInfo0 = new LNInfo((LN) dupCountLN0, databaseId0, byteArray0, byteArray0);
      byte[] byteArray1 = lNInfo0.getKey();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      FileSummary fileSummary0 = new FileSummary();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN(fileSummary0);
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) fileSummaryLN0, (DatabaseId) null, byteArray0, byteArray0);
      lNInfo0.getKey();
      //  // Unstable assertion: assertEquals(61L, fileSummaryLN0.getNodeId());
      //  // Unstable assertion: assertEquals(61L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(3140);
      byte[] byteArray0 = new byte[2];
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, databaseId0, byteArray0, byteArray0);
      byte[] byteArray1 = lNInfo0.getDupKey();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      FileSummary fileSummary0 = new FileSummary();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN(fileSummary0);
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) fileSummaryLN0, (DatabaseId) null, byteArray0, byteArray0);
      lNInfo0.getDupKey();
      //  // Unstable assertion: assertEquals(58L, fileSummaryLN0.getLastId());
      //  // Unstable assertion: assertEquals(58L, fileSummaryLN0.getNodeId());
  }

  @Test
  public void test06()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[1];
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, databaseId0, byteArray0, byteArray0);
      DatabaseId databaseId1 = lNInfo0.getDbId();
      assertSame(databaseId0, databaseId1);
  }

  @Test
  public void test07()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(3140);
      byte[] byteArray0 = new byte[2];
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, databaseId0, byteArray0, byteArray0);
      DatabaseId databaseId1 = lNInfo0.getDbId();
      assertSame(databaseId0, databaseId1);
  }

  @Test
  public void test08()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2142));
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[2];
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(55L, nameLN0.getLastId());
      //  // Unstable assertion: assertEquals(55L, nameLN0.getNodeId());
  }

  @Test
  public void test09()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, (byte[]) null);
      int int0 = lNInfo0.getMemorySize();
      //  // Unstable assertion: assertEquals(38L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals(80, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      byte[] byteArray0 = new byte[1];
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, byteArray0);
      int int0 = lNInfo0.getMemorySize();
      //  // Unstable assertion: assertEquals(13L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals(104, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[7];
      LNInfo lNInfo0 = new LNInfo((LN) null, databaseId0, byteArray0, byteArray0);
      int int0 = lNInfo0.getMemorySize();
      assertEquals(112, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      byte[] byteArray0 = new byte[1];
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, byteArray0);
      lNInfo0.getKey();
      //  // Unstable assertion: assertEquals(10L, lN0.getLastId());
      //  // Unstable assertion: assertEquals(10L, lN0.getNodeId());
  }

  @Test
  public void test13()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-636));
      DatabaseId databaseId0 = new DatabaseId((-636));
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) dupCountLN0, databaseId0, byteArray0, byteArray0);
      DupCountLN dupCountLN1 = (DupCountLN)lNInfo0.getLN();
      //  // Unstable assertion: assertEquals(7L, dupCountLN1.getLastId());
  }

  @Test
  public void test14()  throws Throwable  {
      NameLN nameLN0 = new NameLN((DatabaseId) null);
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, (DatabaseId) null, (byte[]) null, (byte[]) null);
      lNInfo0.getDupKey();
      //  // Unstable assertion: assertEquals(4L, nameLN0.getNodeId());
      //  // Unstable assertion: assertEquals(4L, nameLN0.getLastId());
  }

  @Test
  public void test15()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      byte[] byteArray0 = new byte[1];
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(1L, lN0.getLastId());
      //  // Unstable assertion: assertEquals(1L, lN0.getNodeId());
  }
}

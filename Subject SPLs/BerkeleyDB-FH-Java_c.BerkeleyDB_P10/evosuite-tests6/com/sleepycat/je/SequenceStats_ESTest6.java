/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 23:39:24 KST 2017
 */

package com.sleepycat.je;

import static org.junit.Assert.assertEquals;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class SequenceStats_ESTest6 extends SequenceStats_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1389), 3610, 3750L, 0L, (-3320L), 3610, 0L, (-58));
      long long0 = sequenceStats0.getValue();
      assertEquals((-3320L), sequenceStats0.getLastValue());
      assertEquals(0L, sequenceStats0.getMax());
      assertEquals(3610, sequenceStats0.getNCachedGets());
      assertEquals(-58, sequenceStats0.getCacheSize());
      assertEquals(3750L, sequenceStats0.getCurrent());
      assertEquals(-1389, sequenceStats0.getNGets());
      assertEquals(0L, long0);
      assertEquals(3610L, sequenceStats0.getMin());
  }

  @Test
  public void test01()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1953), 0, 1L, (-625L), 0, 2781L, (-1953), 0);
      long long0 = sequenceStats0.getValue();
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(1L, sequenceStats0.getCurrent());
      assertEquals((-1953L), sequenceStats0.getMax());
      assertEquals(-1953, sequenceStats0.getNGets());
      assertEquals(2781L, sequenceStats0.getMin());
      assertEquals((-625L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0L, 0L, 0L, 0L, 0L, 0);
      int int0 = sequenceStats0.getNGets();
      assertEquals(0, int0);
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test03()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      int int0 = sequenceStats0.getNGets();
      assertEquals((-41L), sequenceStats0.getCurrent());
      assertEquals((-41), int0);
      assertEquals((-41L), sequenceStats0.getValue());
      assertEquals(-41, sequenceStats0.getNCachedGets());
      assertEquals((-41L), sequenceStats0.getLastValue());
      assertEquals((-41L), sequenceStats0.getMax());
      assertEquals(-41, sequenceStats0.getCacheSize());
      assertEquals((-41L), sequenceStats0.getMin());
  }

  @Test
  public void test04()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0L, 0L, 0L, 0L, 0L, 0);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(0, int0);
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNGets());
  }

  @Test
  public void test05()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals((-41L), sequenceStats0.getValue());
      assertEquals(-41, sequenceStats0.getCacheSize());
      assertEquals((-41), int0);
      assertEquals((-41L), sequenceStats0.getMin());
      assertEquals((-41L), sequenceStats0.getLastValue());
      assertEquals((-41L), sequenceStats0.getMax());
      assertEquals((-41L), sequenceStats0.getCurrent());
      assertEquals(-41, sequenceStats0.getNGets());
  }

  @Test
  public void test06()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), (-1), 0L, (-1), 0L, 0L, (-1), (-1));
      long long0 = sequenceStats0.getMin();
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals((-1L), sequenceStats0.getMax());
      assertEquals(-1, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals(0L, long0);
      assertEquals(-1, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test07()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      long long0 = sequenceStats0.getMin();
      assertEquals(-41, sequenceStats0.getCacheSize());
      assertEquals((-41L), sequenceStats0.getCurrent());
      assertEquals((-41L), sequenceStats0.getLastValue());
      assertEquals(-41, sequenceStats0.getNCachedGets());
      assertEquals((-41L), sequenceStats0.getValue());
      assertEquals(-41, sequenceStats0.getNGets());
      assertEquals((-41L), sequenceStats0.getMax());
      assertEquals((-41L), long0);
  }

  @Test
  public void test08()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0L, 0L, 0L, 0L, 0L, 0);
      sequenceStats0.getMax();
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test09()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      long long0 = sequenceStats0.getMax();
      assertEquals(-41, sequenceStats0.getCacheSize());
      assertEquals((-41L), sequenceStats0.getCurrent());
      assertEquals((-41L), sequenceStats0.getLastValue());
      assertEquals((-41L), sequenceStats0.getMin());
      assertEquals((-41L), long0);
      assertEquals((-41L), sequenceStats0.getValue());
      assertEquals(-41, sequenceStats0.getNGets());
      assertEquals(-41, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test10()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0L, 0L, 0L, 0L, 0L, 0);
      sequenceStats0.getLastValue();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getNGets());
  }

  @Test
  public void test11()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      long long0 = sequenceStats0.getLastValue();
      assertEquals(-41, sequenceStats0.getNGets());
      assertEquals((-41L), long0);
      assertEquals((-41L), sequenceStats0.getMax());
      assertEquals((-41L), sequenceStats0.getCurrent());
      assertEquals((-41L), sequenceStats0.getMin());
      assertEquals(-41, sequenceStats0.getCacheSize());
      assertEquals(-41, sequenceStats0.getNCachedGets());
      assertEquals((-41L), sequenceStats0.getValue());
  }

  @Test
  public void test12()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0L, 0L, 0L, 0L, 0L, 0);
      sequenceStats0.getCurrent();
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test13()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      long long0 = sequenceStats0.getCurrent();
      assertEquals((-41L), sequenceStats0.getMin());
      assertEquals(-41, sequenceStats0.getNGets());
      assertEquals((-41L), sequenceStats0.getMax());
      assertEquals((-41L), long0);
      assertEquals(-41, sequenceStats0.getCacheSize());
      assertEquals(-41, sequenceStats0.getNCachedGets());
      assertEquals((-41L), sequenceStats0.getValue());
      assertEquals((-41L), sequenceStats0.getLastValue());
  }

  @Test
  public void test14()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 2177, 0L, 2177, 0L, 0, 0L, 0);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(2177, sequenceStats0.getNCachedGets());
      assertEquals(0, int0);
      assertEquals(2177L, sequenceStats0.getValue());
      assertEquals(0L, sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(0L, sequenceStats0.getMax());
  }

  @Test
  public void test15()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-41), (-41), (-41), (-41), (-41), (-41), (-41), (-41));
      int int0 = sequenceStats0.getCacheSize();
      assertEquals((-41L), sequenceStats0.getValue());
      assertEquals(-41, sequenceStats0.getNCachedGets());
      assertEquals(-41, sequenceStats0.getNGets());
      assertEquals((-41L), sequenceStats0.getCurrent());
      assertEquals((-41), int0);
      assertEquals((-41L), sequenceStats0.getMin());
      assertEquals((-41L), sequenceStats0.getMax());
      assertEquals((-41L), sequenceStats0.getLastValue());
  }

  @Test
  public void test16()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(1, 1, 1, 1, (-1642L), 2413L, (-1683L), 1);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(1, int0);
      assertEquals((-1683L), sequenceStats0.getMax());
      assertEquals((-1642L), sequenceStats0.getLastValue());
      assertEquals(1, sequenceStats0.getNGets());
      assertEquals(1L, sequenceStats0.getValue());
      assertEquals(2413L, sequenceStats0.getMin());
      assertEquals(1L, sequenceStats0.getCurrent());
      assertEquals(1, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test17()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165);
      long long0 = sequenceStats0.getValue();
      assertEquals(1165, sequenceStats0.getNCachedGets());
      assertEquals(1165L, sequenceStats0.getLastValue());
      assertEquals(1165, sequenceStats0.getCacheSize());
      assertEquals(1165L, sequenceStats0.getMin());
      assertEquals(1165L, sequenceStats0.getCurrent());
      assertEquals(1165L, sequenceStats0.getMax());
      assertEquals(1165, sequenceStats0.getNGets());
      assertEquals(1165L, long0);
  }

  @Test
  public void test18()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165);
      long long0 = sequenceStats0.getMin();
      assertEquals(1165L, sequenceStats0.getValue());
      assertEquals(1165, sequenceStats0.getNGets());
      assertEquals(1165, sequenceStats0.getNCachedGets());
      assertEquals(1165L, sequenceStats0.getCurrent());
      assertEquals(1165, sequenceStats0.getCacheSize());
      assertEquals(1165L, sequenceStats0.getMax());
      assertEquals(1165L, sequenceStats0.getLastValue());
      assertEquals(1165L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1389), 3610, 3750L, 0L, (-3320L), 3610, 0L, (-58));
      long long0 = sequenceStats0.getCurrent();
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(3610L, sequenceStats0.getMin());
      assertEquals((-3320L), sequenceStats0.getLastValue());
      assertEquals(-58, sequenceStats0.getCacheSize());
      assertEquals(3750L, long0);
      assertEquals(-1389, sequenceStats0.getNGets());
      assertEquals(3610, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getMax());
  }

  @Test
  public void test20()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(22, 22, 22, 22, 0L, (-213L), 1110L, 22);
      String string0 = sequenceStats0.toString();
      assertEquals("nGets=22\nnCachedGets=22\ncurrent=22\nvalue=22\nlastValue=0\nmin=-213\nmax=1110\ncacheSize=22", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(1165L, sequenceStats0.getMin());
      assertEquals(1165L, sequenceStats0.getValue());
      assertEquals(1165, int0);
      assertEquals(1165, sequenceStats0.getCacheSize());
      assertEquals(1165L, sequenceStats0.getLastValue());
      assertEquals(1165L, sequenceStats0.getMax());
      assertEquals(1165L, sequenceStats0.getCurrent());
      assertEquals(1165, sequenceStats0.getNGets());
  }

  @Test
  public void test22()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(22, 22, 22, 22, 0L, (-213L), 1110L, 22);
      int int0 = sequenceStats0.getNGets();
      assertEquals(22, sequenceStats0.getNCachedGets());
      assertEquals(22L, sequenceStats0.getValue());
      assertEquals(1110L, sequenceStats0.getMax());
      assertEquals(22, sequenceStats0.getCacheSize());
      assertEquals((-213L), sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(22L, sequenceStats0.getCurrent());
      assertEquals(22, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165);
      long long0 = sequenceStats0.getMax();
      assertEquals(1165, sequenceStats0.getNGets());
      assertEquals(1165L, sequenceStats0.getValue());
      assertEquals(1165L, long0);
      assertEquals(1165L, sequenceStats0.getMin());
      assertEquals(1165L, sequenceStats0.getLastValue());
      assertEquals(1165, sequenceStats0.getCacheSize());
      assertEquals(1165, sequenceStats0.getNCachedGets());
      assertEquals(1165L, sequenceStats0.getCurrent());
  }

  @Test
  public void test24()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, (-818L), 1L, 1L, (-3140L), 0, 749);
      long long0 = sequenceStats0.getLastValue();
      assertEquals((-3140L), sequenceStats0.getMin());
      assertEquals(1L, sequenceStats0.getValue());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0L, sequenceStats0.getMax());
      assertEquals(749, sequenceStats0.getCacheSize());
      assertEquals((-818L), sequenceStats0.getCurrent());
      assertEquals(1L, long0);
      assertEquals(0, sequenceStats0.getNCachedGets());
  }
}

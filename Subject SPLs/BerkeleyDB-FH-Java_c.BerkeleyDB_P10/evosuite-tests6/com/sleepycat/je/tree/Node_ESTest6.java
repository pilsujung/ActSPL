/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 02:10:24 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Properties;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.config.ConfigParam;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class Node_ESTest6 extends Node_ESTest_scaffolding6 {

  @Test
  public void test00()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      StringWriter stringWriter0 = new StringWriter();
      Node.getNextNodeId();
      Node.setLastNodeId(1155L);
      String string0 = ConfigParam.CONFIG_DELIM;
      Node.setLastNodeId(1001444L);
      mapLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId(275);
      EnvironmentConfig environmentConfig0 = null;
      try {
        environmentConfig0 = new EnvironmentConfig((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.EnvironmentMutableConfig", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(6);
      //  // Unstable assertion: assertEquals(3L, dupCountLN0.getNodeId());
      
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("com.sleepycat.je.tree.DupCountLN");
      dupCountLN0.readFromLog(byteBuffer0, (byte) (-114));
      //  // Unstable assertion: assertEquals(3L, dupCountLN0.getLastId());
  }

  @Test
  public void test02()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      String string0 = dBIN0.toString();
      //  // Unstable assertion: assertEquals(1L, dBIN0.getLastId());
      //  // Unstable assertion: assertEquals("<dbin>\n  <dupkey></dupkey>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</dbin>", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(6);
      dupCountLN0.isValidForDelete();
      //  // Unstable assertion: assertEquals(1L, dupCountLN0.getNodeId());
  }

  @Test
  public void test04()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.getMemorySizeIncludedByParent();
      //  // Unstable assertion: assertEquals((-1L), dupCountLN0.getLastId());
  }

  @Test
  public void test05()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      mapLN0.canBeAncestor(true);
      //  // Unstable assertion: assertEquals(3L, mapLN0.getLastId());
  }

  @Test
  public void test06()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      // Undeclared exception!
      try { 
        lN0.dumpString(136, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 136
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.dump((-1999));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1999
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getType();
      //  // Unstable assertion: assertEquals((-1L), dIN0.getLastId());
  }

  @Test
  public void test09()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<com.sleepycat.je.tree.MapLN/0");
      // Undeclared exception!
      try { 
        mapLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LN lN0 = new LN();
      int int0 = lN0.getLogSize();
      //  // Unstable assertion: assertEquals(9, int0);
      //  // Unstable assertion: assertEquals((-3L), lN0.getLastId());
  }

  @Test
  public void test11()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      int int0 = mapLN0.getLevel();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[0];
      mapLN0.verify(byteArray0);
      //  // Unstable assertion: assertEquals(9L, mapLN0.getLastId());
  }

  @Test
  public void test13()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.dump(1);
      //  // Unstable assertion: assertEquals(7L, dBIN0.getLastId());
  }

  @Test
  public void test14()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      StringWriter stringWriter0 = new StringWriter(9);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      nameLN0.dumpLog(stringBuffer0, false);
      assertEquals(86, stringBuffer0.capacity());
      assertEquals(0L, nameLN0.getNodeId());
  }

  @Test
  public void test15()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      mapLN0.shortDescription();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = Node.getLastId();
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(6);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(";");
      // Undeclared exception!
      try { 
        dupCountLN0.readFromLog(byteBuffer0, (byte) (-114));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(6);
      dupCountLN0.setNodeId(1L);
      assertEquals(1L, dupCountLN0.getNodeId());
  }

  @Test
  public void test19()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      dupCountLN0.postFetchInit(databaseImpl0, (-1L));
      //  // Unstable assertion: assertEquals(3L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertEquals(3L, dupCountLN0.getLastId());
  }

  @Test
  public void test20()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      TreeLocation treeLocation0 = new TreeLocation();
      try { 
        dupCountLN0.matchLNByNodeId(treeLocation0, 0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // matchLNByNodeId called on non DIN/DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Node", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.countAsObsoleteWhenLogged();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(0L, bIN0.getLastId());
  }

  @Test
  public void test22()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (long) (byte)0, (byte)0);
      dIN0.setDupCountLN(childReference0);
      //  // Unstable assertion: assertEquals((-1L), dIN0.getLastId());
  }

  @Test
  public void test23()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(6);
      long long0 = dupCountLN0.getNodeId();
      //  // Unstable assertion: assertEquals(1L, long0);
  }
}

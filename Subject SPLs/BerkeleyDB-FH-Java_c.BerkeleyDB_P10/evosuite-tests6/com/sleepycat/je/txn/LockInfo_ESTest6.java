/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 02:29:18 KST 2017
 */

package com.sleepycat.je.txn;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.EnvironmentConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true)
public class LockInfo_ESTest6 extends LockInfo_ESTest_scaffolding6 {

  @Test
  public void test0()  throws Throwable  {
      Txn txn0 = new Txn();
      LockType lockType0 = LockType.RANGE_WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) txn0, lockType0);
      Txn txn1 = (Txn)lockInfo0.getLocker();
      assertEquals(0L, txn1.getLockTimeout());
  }

  @Test
  public void test1()  throws Throwable  {
      Txn txn0 = new Txn();
      LockType lockType0 = LockType.RANGE_WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) txn0, lockType0);
      LockType lockType1 = lockInfo0.getLockType();
      assertTrue(lockType1.isWriteLock());
  }

  @Test
  public void test2()  throws Throwable  {
      LockType lockType0 = LockType.READ;
      lockType0.getUpgrade(lockType0);
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      lockInfo0.getLocker();
      //  // Unstable assertion: assertFalse(lockInfo0.getDeadlockStackTrace());
      
      LockInfo.setDeadlockStackTrace(true);
      lockInfo0.getLockType();
      lockInfo0.toString();
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      String string0 = lockInfo0.toString();
      //  // Unstable assertion: assertEquals("<LockInfo locker=\"null\" type=\"READ\"/>", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LockType lockType0 = LockType.WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      LockInfo lockInfo1 = (LockInfo)lockInfo0.clone();
      //  // Unstable assertion: assertFalse(lockInfo1.getDeadlockStackTrace());
  }

  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = LockInfo.getDeadlockStackTrace();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      LockType lockType0 = LockType.WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      lockInfo0.setLockType((LockType) null);
      LockType lockType1 = lockInfo0.getLockType();
      assertNull(lockType1);
  }

  @Test
  public void test6()  throws Throwable  {
      Txn txn0 = new Txn();
      LockType lockType0 = LockType.RANGE_WRITE;
      LockInfo lockInfo0 = new LockInfo((Locker) txn0, lockType0);
      lockInfo0.setLocker(txn0);
      assertEquals(0L, txn0.getTxnTimeOut());
  }

  @Test
  public void test7()  throws Throwable  {
      LockType lockType0 = LockType.RANGE_INSERT;
      LockInfo lockInfo0 = new LockInfo((Locker) null, lockType0);
      lockInfo0.dump();
      //  // Unstable assertion: assertFalse(lockInfo0.getDeadlockStackTrace());
  }
}
